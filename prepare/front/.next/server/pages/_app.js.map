{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./pages/_app.js","webpack:///external \"redux-saga\"","webpack:///./sagas/post.js","webpack:///./sagas/user.js","webpack:///./sagas/index.js","webpack:///./reducers/index.js","webpack:///./store/configureStore.js","webpack:///external \"react/jsx-runtime\"","webpack:///external \"next-redux-wrapper\"","webpack:///./reducers/user.js","webpack:///external \"redux-saga/effects\"","webpack:///external \"immer\"","webpack:///external \"react\"","webpack:///./reducers/post.js","webpack:///external \"redux\"","webpack:///external \"redux-devtools-extension\"","webpack:///external \"next/head\"","webpack:///external \"axios\""],"names":[],"mappings":"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6BAAoB;AAC7C;AACA,0BAA0B,kCAAO,CAAC,0CAAe;AACjD,IAAI,SAAoD,CAAC;;AAEzD,gBAAgB,sCAAW,CAAC,QAAO,YAAY;AAC/C;;AAEA,sCAAsC,QAAQ,EAAE;;AAEhD;AACA;;AAEA,gBAAgB,qDAAa;AAC7B;AACA,CAAC;AACc,2FAAO,E;;;;;;;AChCtB,8C;;;;;;;ACAA,+C;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACrB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACO;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,EAAE;;AAEK;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;AAEA;AACA,EAAE;AACF;AACA;AACA;AACA,gBAAgB,QAAQ;AACxB,qBAAqB,kBAAkB,GAAG,iBAAiB,GAAG,kBAAkB;AAChF,oBAAoB,kBAAkB,GAAG,iBAAiB,GAAG,kBAAkB;AAC/E,IAAI;AACJ;;AAEA,kDAAkD,4CAAO;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C,YAAY;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA,CAAC;;AAEc,gEAAO,E;;;;;;;AC9VtB,+C;;;;;;;ACAA,kC;;;;;;;;;;;;;;ACAA,kC;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AACrB;AACP;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,QAAQ;AACR,IAAI;;AAEG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACP;AACA;AACA,CAAC;AACM;AACP;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,IAAI;AACJ;;AAEA,kDAAkD,4CAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4DAA4D;;AAE5D;AACA;AACA,qCAAqC;;AAErC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4DAA4D;;AAE5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B;;AAE5B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iFAAiF;;AAEjF;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;AAEc,gEAAO,E;;;;;;;AChXtB,kC;;;;;;;ACAA,qD;;;;;;;ACAA,sC;;;;;;;ACAA,kC","file":"pages/_app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport 'antd/dist/antd.css';\nimport React from 'react';\nimport Head from 'next/head';\nimport wrapper from '../store/configureStore';\n\nconst NodeBird = ({\n  Component\n}) => {\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"meta\", {\n        charSet: \"utf-8\"\n      }), /*#__PURE__*/_jsx(\"title\", {\n        children: \"NodeBird\"\n      })]\n    }), /*#__PURE__*/_jsx(Component, {})]\n  });\n};\n\nexport default wrapper.withRedux(NodeBird);","module.exports = require(\"redux-saga\");","import { all, delay, fork, put, takeLatest, call, throttle } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`); // lastId가 null이면 0으로\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // lastId가 null이면 0으로\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    console.log('saga post');\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`); // lastId가 null이면 0으로\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    console.log('saga post');\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`); // lastId가 null이면 0으로\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    console.log('saga post');\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { CHANGE_NICKNAME_FAILURE, CHANGE_NICKNAME_REQUEST, CHANGE_NICKNAME_SUCCESS, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOAD_FOLLOWERS_FAILURE, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWINGS_FAILURE, LOAD_FOLLOWINGS_REQUEST, LOAD_FOLLOWINGS_SUCCESS, LOAD_MY_INFO_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, REMOVE_FOLLOWER_FAILURE, REMOVE_FOLLOWER_REQUEST, REMOVE_FOLLOWER_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from \"../reducers/user\";\nimport axios from 'axios';\n\nfunction removeFollowerAPI(data) {\n  return axios.delete(`/user/follower/${data}`);\n}\n\nfunction* removeFollower(action) {\n  try {\n    console.log('saga removeFollower');\n    const result = yield call(removeFollowerAPI, action.data);\n    yield put({\n      type: REMOVE_FOLLOWER_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_FOLLOWER_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadFollowersAPI(data) {\n  return axios.get('/user/followers', data);\n}\n\nfunction* loadFollowers(action) {\n  try {\n    console.log('saga loadFollowers');\n    const result = yield call(loadFollowersAPI, action.data);\n    yield put({\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadFollowingsAPI(data) {\n  return axios.get('/user/followings', data);\n}\n\nfunction* loadFollowings(action) {\n  try {\n    console.log('saga loadFollowings');\n    const result = yield call(loadFollowingsAPI, action.data);\n    yield put({\n      type: LOAD_FOLLOWINGS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_FOLLOWINGS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction changeNicknameAPI(data) {\n  return axios.patch('/user/nickname', {\n    nickname: data\n  });\n}\n\nfunction* changeNickname(action) {\n  try {\n    console.log('saga changeNickname');\n    const result = yield call(changeNicknameAPI, action.data);\n    yield put({\n      type: CHANGE_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: CHANGE_NICKNAME_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadMyInfoAPI() {\n  return axios.get('/user');\n}\n\nfunction* loadMyInfo() {\n  try {\n    console.log('saga loadMyInfo');\n    const result = yield call(loadMyInfoAPI); //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \n    // npm i passport passport-local 로그인를 다루는 미들웨어\n\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  } // 성공결과는 result.data\n  // 실패결과는 err.response.data\n  // put은 디스패치라 생각하면 좋다\n\n}\n\nfunction loadUserAPI(data) {\n  return axios.get(`/user/${data}`);\n}\n\nfunction* loadUser(action) {\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction followAPI(data) {\n  return axios.patch(`/user/${data}/follow`);\n}\n\nfunction* follow(action) {\n  try {\n    console.log('saga follow');\n    const result = yield call(followAPI, action.data); //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \n\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI(data) {\n  return axios.delete(`/user/${data}/follow`);\n}\n\nfunction* unfollow(action) {\n  try {\n    const result = yield call(unfollowAPI, action.data);\n    console.log('saga unfollow');\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga logIn');\n    const result = yield call(logInAPI, action.data); //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \n    // npm i passport passport-local 로그인를 다루는 미들웨어\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  } // 성공결과는 result.data\n  // 실패결과는 err.response.data\n  // put은 디스패치라 생각하면 좋다\n\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); //작동순서 프론트 pages의 onSubmit에 데이터(아이디, 닉네임, 비밀번호)가\n    //SIGNUPREQ 를 통해 리덕스랑 사가 실행, 데이터 함수는 action으로가\n    //signUpAPI의 데이터로 이동 url을 통해 전송\n\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRemoveFollower() {\n  yield takeLatest(REMOVE_FOLLOWER_REQUEST, removeFollower);\n}\n\nfunction* watchLoadFollowers() {\n  yield takeLatest(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nfunction* watchLoadFollowings() {\n  yield takeLatest(LOAD_FOLLOWINGS_REQUEST, loadFollowings);\n}\n\nfunction* watchChangeNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n} // yield take('LOG_IN_REQUEST');은 LOG_IN_REQUEST이 실행될때까지 기다리겠다.\n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchRemoveFollower), fork(watchLoadFollowers), fork(watchLoadFollowings), fork(watchChangeNickname), fork(watchLoadMyInfo), fork(watchLoadUser), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}\n;","import { all, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport postSaga from './post';\nimport userSaga from './user';\naxios.defaults.baseURL = 'http://localhost:3065'; //sagas 의 post url를 등록\n\naxios.defaults.withCredentials = true; //쿠기 전달 허용 이제 saga에 공통적으로 적용된다.\n\nexport default function* rootSaga() {\n  yield all([//all은 함수를 동시에 실행시킴\n  fork(postSaga), fork(userSaga) // fork는 비동기 함수를 실행하는 것\n  // 요청을 보내버리고 결과를 기다리지 않고 다음 것이 실행됨\n  // call은 동기 함수를 실행하는 것\n  // 결과를 기다렸다 다음 것이 실행됨. \n  ]);\n} // generate 함수 function*\n// const gen = function*(){\n// console.log(1);\n// yield;\n// console.log(2);\n// yield;   \n//}\n//\n// const generator = gen();\n// generator.next()  generate함수를 실행시키려면 next()필요\n// console.log(1)실행. 다시 generator 함수를 실행하면\n// console.log(2)실행 generate는 yield가 나오는 곳에서 멈춤\n// 중단점이 있는 함수. 이것이 saga\n// done: true가 나오면 멈춤\n//\n// generate 함수로 무한 표현하기\n// let i = 0;\n// const gen = function* () {\n//     while (true) {\n//         yield i++;\n//     }\n// }\n// const g= gen();\n// g.next();","import { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux'; // combineReducer은 리듀서끼리 합치게 해준다.\n\nimport user from './user';\nimport post from './post'; //(이전상태, 액션) => 다음상태\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return action.payload;\n\n    default:\n      {\n        const combinedReducer = combineReducers({\n          user,\n          post\n        }); //combinedReducer user와 post가 합친 리듀서 생성\n\n        return combinedReducer(state, action);\n      }\n  }\n}; // const rootReducer = combineReducers({\n//     index: (state = {}, action) => {\n//         switch (action.type) {\n//             case HYDRATE:\n//                 console.log('HYDRATE', action);\n//                 return {\n//                     ...state,\n//                     ...action.payload,\n//                 };\n//             // HYDRATE를 위해 인덕스 리듀션을 추가\n//             default: return state;\n//             // default: return state;를 안적으면 리턴값이 undifined가 뜬다.\n//         }\n//     },\n//     user,\n//     post,\n// });\n\n\nexport default rootReducer;","import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\nimport reducer from '../reducers';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = true ? compose(applyMiddleware(...middlewares)) //배포용\n  : composeWithDevTools(applyMiddleware(...middlewares)); //개발용\n\n  const store = createStore(reducer, enhancer); //enhancer 미들웨어 액션기록을 보기위해 사용\n  //redux-devtools-extension\n\n  store.sagaTask = sagaMiddleware.run(rootSaga); //sagaTask 서바사이드 렌더링을 하기위해 필요\n\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: process.env.NODE === 'development'\n});\nexport default wrapper;","module.exports = require(\"react/jsx-runtime\");","module.exports = require(\"next-redux-wrapper\");","import produce from 'immer';\nexport const initialState = {\n  removeFollowerLoading: false,\n  //팔로워 차단 가져오기\n  removeFollowerDone: false,\n  removeFollowerError: null,\n  loadMyInfoLoading: false,\n  //유저정보 가져오기\n  loadMyInfoDone: false,\n  loadMyInfoError: null,\n  loadUserLoading: false,\n  // 유저 정보 가져오기 시도중\n  loadUserDone: false,\n  loadUserError: null,\n  followLoading: false,\n  // 팔로우 시도중\n  followDone: false,\n  // 팔로우 유무\n  followError: null,\n  unfollowLoading: false,\n  // 언팔로우 시도중\n  unfollowDone: false,\n  // 언팔로우 유무\n  unfollowError: null,\n  logInLoading: false,\n  // 로그인 시도중\n  logInDone: false,\n  // 로그인 유무\n  logInError: null,\n  logOutLoading: false,\n  // 로그아웃 시도중\n  logOutDone: false,\n  // 로그아웃 유무\n  logOutError: null,\n  signUpLoading: false,\n  // 회원가입 시도중\n  signUpDone: false,\n  //\n  signUpError: null,\n  //\n  loadFollowersLoading: false,\n  // 팔로워 표시 시도중\n  loadFollowersDone: false,\n  //\n  loadFollowersError: null,\n  //\n  loadFollowingsLoading: false,\n  // 팔로잉 표시 시도중\n  loadFollowingsDone: false,\n  //\n  loadFollowingsError: null,\n  //\n  changeNicknameLoading: false,\n  //닉네임 변경 시도중\n  changeNicknameDone: false,\n  //\n  changeNicknameError: null,\n  //\n  me: null,\n  signUpData: {},\n  loginData: {}\n};\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\nexport const LOAD_MY_INFO_REQUEST = 'LOAD_MY_INFO_REQUEST';\nexport const LOAD_MY_INFO_SUCCESS = 'LOAD_MY_INFO_SUCCESS';\nexport const LOAD_MY_INFO_FAILURE = 'LOAD_MY_INFO_FAILURE';\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const CHANGE_NICKNAME_REQUEST = 'CHANGE_NICKNAME_REQUEST';\nexport const CHANGE_NICKNAME_SUCCESS = 'CHANGE_NICKNAME_SUCCESS';\nexport const CHANGE_NICKNAME_FAILURE = 'CHANGE_NICKNAME_FAILURE';\nexport const FOLLOW_REQUEST = 'FOLLOW_REQUEST';\nexport const FOLLOW_SUCCESS = 'FOLLOW_SUCCESS';\nexport const FOLLOW_FAILURE = 'FOLLOW_FAILURE';\nexport const UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport const UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport const UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE';\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport const loginAction = data => {\n  return (dispatch, getState) => {\n    const state = getState();\n    dispatch(loginRequestAction());\n    axios.post('/api/login').then(res => {\n      dispatch(loginSuccessAction(res.data));\n    }).catch(err => {\n      dispatch(loginFailureAction(err));\n    });\n  };\n}; //액션 생성기\n\nexport const loginRequestAction = data => {\n  return {\n    type: LOG_IN_REQUEST,\n    data\n  };\n};\nexport const logoutRequestAction = data => {\n  return {\n    type: LOG_OUT_REQUEST //로그아웃은 데이터가 필요없다.\n\n  };\n}; // const dummyUser = (data) => ({\n//     ...data,\n//     nickname: '쩡운',\n//     id: 1,\n//     Posts: [{ id: 1 }],\n//     Followings: [{ nickname: '오징어' }, { nickname: '명태' }, { nickname: '강아지' }],\n//     Followers: [{ nickname: '오징어' }, { nickname: '명태' }, { nickname: '강아지' }],\n// });\n// reducer은 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성을 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case REMOVE_FOLLOWER_REQUEST:\n      draft.removeFollowerLoading = true;\n      draft.removeFollowerDone = false;\n      draft.removeFollowerError = null;\n      break;\n\n    case REMOVE_FOLLOWER_SUCCESS:\n      draft.removeFollowerLoading = false;\n      draft.removeFollowerDone = true;\n      draft.me.Followers = draft.me.Followers.filter(v => v.id !== action.data.UserId);\n\n    case REMOVE_FOLLOWER_FAILURE:\n      draft.removeFollowerLoading = false;\n      draft.removeFollowerError = action.data.error;\n      break;\n\n    case LOAD_FOLLOWERS_REQUEST:\n      draft.loadFollowersLoading = true;\n      draft.loadFollowersDone = false;\n      draft.loadFollowersError = null;\n      break;\n\n    case LOAD_FOLLOWERS_SUCCESS:\n      draft.loadFollowersLoading = false;\n      draft.loadFollowersDone = true;\n      draft.me.Followers = action.data;\n\n    case LOAD_FOLLOWERS_FAILURE:\n      draft.loadFollowersLoading = false;\n      draft.loadFollowersError = action.data.error;\n      break;\n\n    case LOAD_FOLLOWINGS_REQUEST:\n      draft.loadFollowingsLoading = true;\n      draft.loadFollowingsDone = false;\n      draft.loadFollowingsError = null;\n      break;\n\n    case LOAD_FOLLOWINGS_SUCCESS:\n      draft.loadFollowingsLoading = false;\n      draft.loadFollowingsDone = true;\n      draft.me.Followings = action.data;\n      break;\n\n    case LOAD_FOLLOWINGS_FAILURE:\n      draft.loadFollowingsLoading = false;\n      draft.loadFollowingsError = action.data.error;\n      break;\n\n    case LOAD_MY_INFO_REQUEST:\n      draft.loadMyInfoLoading = true;\n      draft.loadMyInfoDone = false;\n      draft.loadMyInfoError = null;\n      break;\n\n    case LOAD_MY_INFO_SUCCESS:\n      draft.loadMyInfoLoading = false;\n      draft.loadMyInfoDone = true;\n      draft.me = action.data;\n      break;\n\n    case LOAD_MY_INFO_FAILURE:\n      draft.loadMyInfoLoading = false;\n      draft.loadMyInfoError = action.data.error;\n      break;\n\n    case LOAD_USER_REQUEST:\n      draft.loadUserLoading = true;\n      draft.loadUserError = null;\n      draft.loadUserDone = false;\n      break;\n\n    case LOAD_USER_SUCCESS:\n      draft.loadUserLoading = false;\n      draft.userInfo = action.data;\n      draft.loadUserDone = true;\n      break;\n\n    case LOAD_USER_FAILURE:\n      draft.loadUserLoading = false;\n      draft.loadUserError = action.error;\n      break;\n\n    case FOLLOW_REQUEST:\n      draft.followLoading = true;\n      draft.followDone = false;\n      draft.followError = null;\n      break;\n\n    case FOLLOW_SUCCESS:\n      draft.followLoading = false;\n      draft.followDone = true;\n      draft.me.Followings.push({\n        id: action.data.UserId\n      });\n      break;\n\n    case FOLLOW_FAILURE:\n      draft.followLoading = false;\n      draft.followError = action.error;\n      break;\n\n    case UNFOLLOW_REQUEST:\n      draft.unfollowLoading = true;\n      draft.unfollowDone = false;\n      draft.unfollowError = null;\n      break;\n\n    case UNFOLLOW_SUCCESS:\n      draft.unfollowLoading = false;\n      draft.unfollowDone = true;\n      draft.me.Followings = draft.me.Followings.filter(v => v.id !== action.data.UserId);\n      break;\n\n    case UNFOLLOW_FAILURE:\n      draft.unfollowLoading = false;\n      draft.unfollowError = action.error;\n      break;\n\n    case LOG_IN_REQUEST:\n      console.log('reducer logIn');\n      draft.logInLoading = true;\n      draft.logInDone = false;\n      draft.logInError = null;\n      break;\n\n    case LOG_IN_SUCCESS:\n      draft.logInLoading = false;\n      draft.logInDone = true;\n      draft.me = action.data;\n      break;\n\n    case LOG_IN_FAILURE:\n      draft.logInLoading = false;\n      draft.logInError = action.error;\n      break;\n\n    case LOG_OUT_REQUEST:\n      draft.logOutLoading = true;\n      draft.logOutDone = false;\n      draft.logOutError = null;\n      break;\n\n    case LOG_OUT_SUCCESS:\n      draft.logOutLoading = false;\n      draft.logOutDone = true;\n      draft.me = null;\n      break;\n\n    case LOG_OUT_FAILURE:\n      draft.logOutLoading = false;\n      draft.logOutError = action.error;\n      break;\n\n    case SIGN_UP_REQUEST:\n      draft.signUpLoading = true;\n      draft.signUpDone = false;\n      draft.signUpError = null;\n      break;\n\n    case SIGN_UP_SUCCESS:\n      draft.signUpLoading = false;\n      draft.signUpDone = true;\n      break;\n\n    case SIGN_UP_FAILURE:\n      draft.signUpLoading = false;\n      draft.signUpError = action.error;\n      break;\n\n    case CHANGE_NICKNAME_REQUEST:\n      draft.changeNicknameLoading = true;\n      draft.changeNicknameDone = false;\n      draft.changeNicknameError = null;\n      break;\n\n    case CHANGE_NICKNAME_SUCCESS:\n      draft.me.nickname = action.data.nickname;\n      draft.changeNicknameLoading = false;\n      draft.changeNicknameDone = true;\n      break;\n\n    case CHANGE_NICKNAME_FAILURE:\n      draft.changeNicknameLoading = false;\n      draft.changeNicknameError = action.error;\n      break;\n\n    case ADD_POST_TO_ME:\n      draft.me.Posts.unshift({\n        id: action.data\n      });\n      break;\n    // immer를 사용하면 위에 처럼 줄일 수 있다.\n    // return {\n    //     ...state,\n    //     me: {\n    //         ...state.me,\n    //         Posts: [{ id: action.data }, ...state.me.Posts],\n    //     },\n    // };\n\n    case REMOVE_POST_OF_ME:\n      draft.me.Posts = draft.me.Posts.filter(v => v.id !== action.data);\n      break;\n    // immer를 사용하면 위에 처럼 줄일 수 있다.\n    // return {\n    //     ...state,\n    //     me: {\n    //         ...state.me,\n    //         Posts: state.me.Posts.filter((v) => v.id !== action.data),\n    //     },\n    // };\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","module.exports = require(\"redux-saga/effects\");","module.exports = require(\"immer\");","module.exports = require(\"react\");","import produce from 'immer';\nexport const initialState = {\n  mainPosts: [// {\n    //     id: 1,\n    //     User: {\n    //         id: 1,\n    //         nickname: '이정운',\n    //     },\n    //     content: '첫 번째 게시글 #해시태크 #익스프레스',\n    //     Images: [{\n    //         id: shortId.generate(),\n    //         src: 'https://3.bp.blogspot.com/-paIvI6xdE2k/WovHemFi6jI/AAAAAAACN20/6hBeNS_XVO0idJlKvTR_hKhDsaob7pdOgCLcBGAs/s1600/3.gif',\n    //     }, {\n    //         id: shortId.generate(),\n    //         src: 'https://coinpan.com/files/attach/images/198/013/866/096/b5a203116c9ff0d11a13d9bb43f7bb39.gif',\n    //     }, {\n    //         id: shortId.generate(),\n    //         src: 'http://t1.daumcdn.net/thumb/R1024x0/?fname=http://cfile271.uf.daum.net/image/276DCA3C5586B77E26FDB2',\n    //     }],\n    //     Comments: [{\n    //         id: shortId.generate(),\n    //         User: {\n    //             id: shortId.generate(),\n    //             nickname: '쩡운'\n    //         },\n    //         content: '호호호호',\n    //     }, {\n    //         id: shortId.generate(),\n    //         User: {\n    //             id: shortId.generate(),\n    //             nickname: '쩡훈',\n    //         },\n    //         content: '헝헝헝헝',\n    //     }],\n    // }\n  ],\n  singlePost: [],\n  imagePaths: [],\n  // imagePaths는 이미지 업로드할때 생기는 경로가 저장\n  hasMorePosts: true,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n}; // 이제 안씀\n// export const generateDumyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//         //faker 랜덤 닉네임 \n//     },\n//     content: faker.lorem.paragraph(),\n//     //faker 랜덤 문단\n//     Images: [{\n//         src: faker.image.image(),\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//             //faker 랜덤 닉네임 \n//         },\n//         content: faker.lorem.sentence(),\n//         //faker 랜덤 문장\n//     }],\n// }));\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // 이제 안쓴다.\n// const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: '이정운',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n// const dummyComment = (data) => ({\n//     id: shortId.generate(),\n//     content: data,\n//     User: {\n//         id: 1,\n//         nickname: '이정운',\n//     },\n// });\n// reducer은 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성을 지키면서)\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case RETWEET_REQUEST:\n      console.log('reducer post');\n      draft.retweetLoading = true;\n      draft.retweetDone = false;\n      draft.retweetError = null;\n      break;\n\n    case RETWEET_SUCCESS:\n      {\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n      }\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      break;\n\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      console.log('reducer post');\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case LIKE_POST_REQUEST:\n      console.log('reducer post');\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostLoading = false;\n      draft.likePostError = action.error;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      console.log('reducer post');\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostLoading = false;\n      draft.unlikePostError = action.error;\n      break;\n\n    case LOAD_POST_REQUEST:\n      console.log('reducer post');\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.concat(action.data); //concat 합치기\n\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.singlePost = action.data; //singlePost 하나만 저장할때\n\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostLoading = false;\n      draft.loadPostError = action.error;\n      break;\n    //액션을 동시에 사용할 수 있는 경우는\n    //한페이지에서 이 액션을 같이 사용하는게 아니라면 가능\n\n    case LOAD_USER_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_POSTS_REQUEST:\n      console.log('reducer post');\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_USER_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_POSTS_SUCCESS:\n      draft.mainPosts = draft.mainPosts.concat(action.data); //concat 합치기\n\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.hasMorePosts = draft.mainPosts.length === 10;\n      break;\n\n    case LOAD_USER_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      console.log('reducer post');\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.mainPosts.unshift(action.data);\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.imagePaths = []; //업로드 후 이미지패스 초기화\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      console.log('reducer post');\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId); //불변성을 안지키는 거면 draft(immer)을 안쓰는것이 좋다.\n\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // immer 쓰면 이것이 위에 처럼 간단해진다.\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentLoading: false,\n        //     addCommentDone: true,\n        // };\n      }\n      ;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","module.exports = require(\"redux\");","module.exports = require(\"redux-devtools-extension\");","module.exports = require(\"next/head\");","module.exports = require(\"axios\");"],"sourceRoot":""}