{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { FOLLOW_FAILURE, FOLLOW_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from \"../reducers/user\";\n\nfunction followAPI(data) {\n  return axios.post('/api/follow', data);\n}\n\nfunction* follow(action) {\n  try {\n    console.log('saga follow'); //const result = yield call(logInAPI, action.data);\n    //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \n\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  } // 성공결과는 result.data\n  // 실패결과는 err.response.data\n  // put은 디스패치라 생각하면 좋다\n\n}\n\nfunction unfollowAPI(data) {\n  return axios.post('/api/unfollow', data);\n}\n\nfunction* unfollow(action) {\n  try {\n    console.log('saga unfollow');\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  } // 성공결과는 result.data\n  // 실패결과는 err.response.data\n  // put은 디스패치라 생각하면 좋다\n\n}\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga logIn'); //const result = yield call(logInAPI, action.data);\n    //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \n\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  } // 성공결과는 result.data\n  // 실패결과는 err.response.data\n  // put은 디스패치라 생각하면 좋다\n\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    //const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI() {\n  return axios.post('/api/signUp');\n}\n\nfunction* signUp() {\n  try {\n    //const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n} // yield take('LOG_IN_REQUEST');은 LOG_IN_REQUEST이 실행될때까지 기다리겠다.\n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}\n;","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","FOLLOW_FAILURE","FOLLOW_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","followAPI","data","axios","post","follow","action","console","log","type","err","error","response","unfollowAPI","unfollow","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","loginAPI","logIn","logOutAPI","logOut","signUpAPI","signUp","watchFollow","FOLLOW_REQUEST","watchUnfollow","UNFOLLOW_REQUEST","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport { FOLLOW_FAILURE, FOLLOW_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from \"../reducers/user\";\r\n\r\nfunction followAPI(data) {\r\n    return axios.post('/api/follow', data);\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        console.log('saga follow');\r\n        //const result = yield call(logInAPI, action.data);\r\n        //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \r\n        yield delay(1000);\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n\r\n    // 성공결과는 result.data\r\n    // 실패결과는 err.response.data\r\n    // put은 디스패치라 생각하면 좋다\r\n}\r\n\r\nfunction unfollowAPI(data) {\r\n    return axios.post('/api/unfollow', data);\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        console.log('saga unfollow');\r\n        yield delay(1000);\r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n\r\n    // 성공결과는 result.data\r\n    // 실패결과는 err.response.data\r\n    // put은 디스패치라 생각하면 좋다\r\n}\r\n\r\n\r\nfunction loginAPI(data) {\r\n    return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        console.log('saga logIn');\r\n        //const result = yield call(logInAPI, action.data);\r\n        //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n\r\n    // 성공결과는 result.data\r\n    // 실패결과는 err.response.data\r\n    // put은 디스패치라 생각하면 좋다\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n\r\n        //const result = yield call(logOutAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction signUpAPI() {\r\n    return axios.post('/api/signUp');\r\n}\r\n\r\nfunction* signUp() {\r\n    try {\r\n\r\n        //const result = yield call(signUpAPI);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n// yield take('LOG_IN_REQUEST');은 LOG_IN_REQUEST이 실행될때까지 기다리겠다.\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}