{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, generateDumyPost, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    console.log('saga post');\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDumyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/addPost', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    console.log('saga post');\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/removePost', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data);\n    console.log('saga post');\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","generateDumyPost","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","loadPostsAPI","data","axios","get","loadPosts","action","console","log","id","generate","type","err","response","addPostAPI","post","addPost","content","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport shortId from 'shortid';\r\nimport {\r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n    ADD_POST_TO_ME, generateDumyPost,\r\n    LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data);\r\n        console.log('saga post');\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: generateDumyPost(10),\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/addPost', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data);\r\n        console.log('saga post');\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/removePost', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        //const result = yield call(removePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}