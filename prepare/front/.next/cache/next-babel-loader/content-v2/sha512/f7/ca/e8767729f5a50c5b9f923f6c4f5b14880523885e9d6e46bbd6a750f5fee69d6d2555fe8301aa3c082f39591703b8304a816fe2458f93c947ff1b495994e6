{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  mainPosts: [// {\n    //     id: 1,\n    //     User: {\n    //         id: 1,\n    //         nickname: '이정운',\n    //     },\n    //     content: '첫 번째 게시글 #해시태크 #익스프레스',\n    //     Images: [{\n    //         id: shortId.generate(),\n    //         src: 'https://3.bp.blogspot.com/-paIvI6xdE2k/WovHemFi6jI/AAAAAAACN20/6hBeNS_XVO0idJlKvTR_hKhDsaob7pdOgCLcBGAs/s1600/3.gif',\n    //     }, {\n    //         id: shortId.generate(),\n    //         src: 'https://coinpan.com/files/attach/images/198/013/866/096/b5a203116c9ff0d11a13d9bb43f7bb39.gif',\n    //     }, {\n    //         id: shortId.generate(),\n    //         src: 'http://t1.daumcdn.net/thumb/R1024x0/?fname=http://cfile271.uf.daum.net/image/276DCA3C5586B77E26FDB2',\n    //     }],\n    //     Comments: [{\n    //         id: shortId.generate(),\n    //         User: {\n    //             id: shortId.generate(),\n    //             nickname: '쩡운'\n    //         },\n    //         content: '호호호호',\n    //     }, {\n    //         id: shortId.generate(),\n    //         User: {\n    //             id: shortId.generate(),\n    //             nickname: '쩡훈',\n    //         },\n    //         content: '헝헝헝헝',\n    //     }],\n    // }\n  ],\n  imagePaths: [],\n  // imagePaths는 이미지 업로드할때 생기는 경로가 저장\n  hasMorePosts: true,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // 이제 안씀\n// export const generateDumyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//         //faker 랜덤 닉네임 \n//     },\n//     content: faker.lorem.paragraph(),\n//     //faker 랜덤 문단\n//     Images: [{\n//         src: faker.image.image(),\n//     }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//             //faker 랜덤 닉네임 \n//         },\n//         content: faker.lorem.sentence(),\n//         //faker 랜덤 문장\n//     }],\n// }));\n\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; // 이제 안쓴다.\n// const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: '이정운',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n// const dummyComment = (data) => ({\n//     id: shortId.generate(),\n//     content: data,\n//     User: {\n//         id: 1,\n//         nickname: '이정운',\n//     },\n// });\n// reducer은 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성을 지키면서)\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        console.log('reducer post');\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case LIKE_POST_REQUEST:\n        console.log('reducer post');\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers.push({\n            id: action.data.UserId\n          });\n\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n\n      case UNLIKE_POST_REQUEST:\n        console.log('reducer post');\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Likers = _post2.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n\n      case LOAD_POSTS_REQUEST:\n        console.log('reducer post');\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.mainPosts = action.data.concat(draft.mainPosts); //concat 합치기\n\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        console.log('reducer post');\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(action.data);\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        console.log('reducer post');\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        }); //불변성을 안지키는 거면 draft(immer)을 안쓰는것이 좋다.\n\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post3 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post3.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // immer 쓰면 이것이 위에 처럼 간단해진다.\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true,\n          // };\n        }\n        ;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","uploadImagesLoading","uploadImagesDone","uploadImagesError","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","console","log","post","Likers","push","id","UserId","error","find","v","PostId","filter","concat","length","unshift","Comments"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\n\r\nexport const initialState = {\r\n    mainPosts: [\r\n        // {\r\n        //     id: 1,\r\n        //     User: {\r\n        //         id: 1,\r\n        //         nickname: '이정운',\r\n        //     },\r\n        //     content: '첫 번째 게시글 #해시태크 #익스프레스',\r\n        //     Images: [{\r\n        //         id: shortId.generate(),\r\n        //         src: 'https://3.bp.blogspot.com/-paIvI6xdE2k/WovHemFi6jI/AAAAAAACN20/6hBeNS_XVO0idJlKvTR_hKhDsaob7pdOgCLcBGAs/s1600/3.gif',\r\n        //     }, {\r\n        //         id: shortId.generate(),\r\n        //         src: 'https://coinpan.com/files/attach/images/198/013/866/096/b5a203116c9ff0d11a13d9bb43f7bb39.gif',\r\n        //     }, {\r\n        //         id: shortId.generate(),\r\n        //         src: 'http://t1.daumcdn.net/thumb/R1024x0/?fname=http://cfile271.uf.daum.net/image/276DCA3C5586B77E26FDB2',\r\n        //     }],\r\n        //     Comments: [{\r\n        //         id: shortId.generate(),\r\n        //         User: {\r\n        //             id: shortId.generate(),\r\n        //             nickname: '쩡운'\r\n        //         },\r\n        //         content: '호호호호',\r\n        //     }, {\r\n        //         id: shortId.generate(),\r\n        //         User: {\r\n        //             id: shortId.generate(),\r\n        //             nickname: '쩡훈',\r\n        //         },\r\n        //         content: '헝헝헝헝',\r\n        //     }],\r\n        // }\r\n    ],\r\n    imagePaths: [],\r\n    // imagePaths는 이미지 업로드할때 생기는 경로가 저장\r\n    hasMorePosts: true,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n};\r\n\r\n// 이제 안씀\r\n// export const generateDumyPost = (number) => Array(number).fill().map(() => ({\r\n//     id: shortId.generate(),\r\n//     User: {\r\n//         id: shortId.generate(),\r\n//         nickname: faker.name.findName(),\r\n//         //faker 랜덤 닉네임 \r\n//     },\r\n//     content: faker.lorem.paragraph(),\r\n//     //faker 랜덤 문단\r\n//     Images: [{\r\n//         src: faker.image.image(),\r\n//     }],\r\n//     Comments: [{\r\n//         User: {\r\n//             id: shortId.generate(),\r\n//             nickname: faker.name.findName(),\r\n//             //faker 랜덤 닉네임 \r\n//         },\r\n//         content: faker.lorem.sentence(),\r\n//         //faker 랜덤 문장\r\n//     }],\r\n// }));\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n// 이제 안쓴다.\r\n// const dummyPost = (data) => ({\r\n//     id: data.id,\r\n//     content: data.content,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: '이정운',\r\n//     },\r\n//     Images: [],\r\n//     Comments: [],\r\n// });\r\n\r\n// const dummyComment = (data) => ({\r\n//     id: shortId.generate(),\r\n//     content: data,\r\n//     User: {\r\n//         id: 1,\r\n//         nickname: '이정운',\r\n//     },\r\n// });\r\n\r\n\r\n// reducer은 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성을 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case UPLOAD_IMAGES_REQUEST:\r\n            console.log('reducer post');\r\n            draft.uploadImagesLoading = true;\r\n            draft.uploadImagesDone = false;\r\n            draft.uploadImagesError = null;\r\n            break;\r\n        case UPLOAD_IMAGES_SUCCESS:{\r\n            draft.imagePaths = action.data;\r\n            post.Likers.push({id: action.data.UserId});\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesDone = true;\r\n            break;\r\n        }\r\n        case UPLOAD_IMAGES_FAILURE:\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesError = action.error;\r\n            break;\r\n\r\n        case LIKE_POST_REQUEST:\r\n            console.log('reducer post');\r\n            draft.likePostLoading = true;\r\n            draft.likePostDone = false;\r\n            draft.likePostError = null;\r\n            break;\r\n        case LIKE_POST_SUCCESS:{\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers.push({id: action.data.UserId});\r\n            draft.likePostLoading = false;\r\n            draft.likePostDone = true;\r\n            break;\r\n        }\r\n        case LIKE_POST_FAILURE:\r\n            draft.likePostLoading = false;\r\n            draft.likePostError = action.error;\r\n            break;\r\n        \r\n        case UNLIKE_POST_REQUEST:\r\n            console.log('reducer post');\r\n            draft.unlikePostLoading = true;\r\n            draft.unlikePostDone = false;\r\n            draft.unlikePostError = null;\r\n            break;\r\n        case UNLIKE_POST_SUCCESS:{\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Likers=post.Likers.filter((v)=>v.id !== action.data.UserId);\r\n            draft.unlikePostLoading = false;\r\n            draft.unlikePostDone = true;\r\n            break;\r\n        }\r\n        case UNLIKE_POST_FAILURE:\r\n            draft.unlikePostLoading = false;\r\n            draft.unlikePostError = action.error;\r\n            break;\r\n        \r\n        case LOAD_POSTS_REQUEST:\r\n            console.log('reducer post');\r\n            draft.loadPostsLoading = true;\r\n            draft.loadPostsDone = false;\r\n            draft.loadPostsError = null;\r\n            break;\r\n        case LOAD_POSTS_SUCCESS:\r\n            draft.mainPosts = action.data.concat(draft.mainPosts);\r\n            //concat 합치기\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsDone = true;\r\n            draft.hasMorePosts = draft.mainPosts.length < 50;\r\n            break;\r\n        case LOAD_POSTS_FAILURE:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsError = action.error;\r\n            break;\r\n\r\n        case ADD_POST_REQUEST:\r\n            console.log('reducer post');\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;\r\n        case ADD_POST_SUCCESS:\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = false;\r\n            draft.addPostError = action.error;\r\n            break;\r\n\r\n        case REMOVE_POST_REQUEST:\r\n            console.log('reducer post');\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId);\r\n            //불변성을 안지키는 거면 draft(immer)을 안쓰는것이 좋다.\r\n            draft.removePostLoading = false;\r\n            draft.removePostDone = true;\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = false;\r\n            draft.removePostError = action.error;\r\n            break;\r\n\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Comments.unshift(action.data);\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            break;\r\n            // immer 쓰면 이것이 위에 처럼 간단해진다.\r\n            // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            // const post = { ...state.mainPosts[postIndex] };\r\n            // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n            // const mainPosts = [...state.mainPosts];\r\n            // mainPosts[postIndex] = post;\r\n            // return {\r\n            //     ...state,\r\n            //     mainPosts,\r\n            //     addCommentLoading: false,\r\n            //     addCommentDone: true,\r\n            // };\r\n        };\r\n        case ADD_COMMENT_FAILURE:\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentError = action.error;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}