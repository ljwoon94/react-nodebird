{"ast":null,"code":"import { all, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport postSaga from './post';\nimport userSaga from './user';\naxios.defaults.baseURL = 'http://localhost:3065'; //sagas 의 post url를 등록\n\nexport default function* rootSaga() {\n  yield all([//all은 함수를 동시에 실행시킴\n  fork(postSaga), fork(userSaga) // fork는 비동기 함수를 실행하는 것\n  // 요청을 보내버리고 결과를 기다리지 않고 다음 것이 실행됨\n  // call은 동기 함수를 실행하는 것\n  // 결과를 기다렸다 다음 것이 실행됨. \n  ]);\n} // generate 함수 function*\n// const gen = function*(){\n// console.log(1);\n// yield;\n// console.log(2);\n// yield;   \n//}\n//\n// const generator = gen();\n// generator.next()  generate함수를 실행시키려면 next()필요\n// console.log(1)실행. 다시 generator 함수를 실행하면\n// console.log(2)실행 generate는 yield가 나오는 곳에서 멈춤\n// 중단점이 있는 함수. 이것이 saga\n// done: true가 나오면 멈춤\n//\n// generate 함수로 무한 표현하기\n// let i = 0;\n// const gen = function* () {\n//     while (true) {\n//         yield i++;\n//     }\n// }\n// const g= gen();\n// g.next();","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/sagas/index.js"],"names":["all","fork","axios","postSaga","userSaga","defaults","baseURL","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,QAArB;AAEAF,KAAK,CAACG,QAAN,CAAeC,OAAf,GAAyB,uBAAzB,C,CACA;;AAEA,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAMP,GAAG,CAAC,CACN;AACAC,EAAAA,IAAI,CAACE,QAAD,CAFE,EAGNF,IAAI,CAACG,QAAD,CAHE,CAIN;AACA;AACA;AACA;AAPM,GAAD,CAAT;AASH,C,CACG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { all, fork } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport postSaga from './post';\r\nimport userSaga from './user';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3065';\r\n//sagas 의 post url를 등록\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        //all은 함수를 동시에 실행시킴\r\n        fork(postSaga),\r\n        fork(userSaga),\r\n        // fork는 비동기 함수를 실행하는 것\r\n        // 요청을 보내버리고 결과를 기다리지 않고 다음 것이 실행됨\r\n        // call은 동기 함수를 실행하는 것\r\n        // 결과를 기다렸다 다음 것이 실행됨. \r\n    ]);\r\n}\r\n    // generate 함수 function*\r\n    // const gen = function*(){\r\n    // console.log(1);\r\n    // yield;\r\n    // console.log(2);\r\n    // yield;   \r\n    //}\r\n    //\r\n    // const generator = gen();\r\n    // generator.next()  generate함수를 실행시키려면 next()필요\r\n    // console.log(1)실행. 다시 generator 함수를 실행하면\r\n    // console.log(2)실행 generate는 yield가 나오는 곳에서 멈춤\r\n    // 중단점이 있는 함수. 이것이 saga\r\n    // done: true가 나오면 멈춤\r\n    //\r\n    // generate 함수로 무한 표현하기\r\n    // let i = 0;\r\n    // const gen = function* () {\r\n    //     while (true) {\r\n    //         yield i++;\r\n    //     }\r\n    // }\r\n    // const g= gen();\r\n    // g.next();"]},"metadata":{},"sourceType":"module"}