{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, REMOVE_POST_FAILURE, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\n\nfunction addPostAPI(data) {\n  return axios.post('/api/addPost', data);\n}\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    console.log('saga post');\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/removePost', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data);\n    console.log('saga post');\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","addPostAPI","data","axios","post","addPost","action","console","log","id","generate","type","content","err","response","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","postSaga","watchLoadPosts"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport shortId from 'shortid';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, REMOVE_POST_FAILURE, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, } from \"../reducers/post\";\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/addPost', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data);\r\n        console.log('saga post');\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/removePost', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        //const result = yield call(removePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}