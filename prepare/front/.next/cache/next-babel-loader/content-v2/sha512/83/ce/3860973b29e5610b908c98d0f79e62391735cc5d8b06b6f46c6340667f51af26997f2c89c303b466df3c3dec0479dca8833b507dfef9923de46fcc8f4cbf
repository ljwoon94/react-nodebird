{"ast":null,"code":"import produce from 'immer';\nexport var initialState = {\n  removeFollowerLoading: false,\n  //팔로워 차단 가져오기\n  removeFollowerDone: false,\n  removeFollowerError: null,\n  loadMyInfoLoading: false,\n  //유저정보 가져오기\n  loadMyInfoDone: false,\n  loadMyInfoError: null,\n  loadUserLoading: false,\n  // 유저 정보 가져오기 시도중\n  loadUserDone: false,\n  loadUserError: null,\n  followLoading: false,\n  // 팔로우 시도중\n  followDone: false,\n  // 팔로우 유무\n  followError: null,\n  unfollowLoading: false,\n  // 언팔로우 시도중\n  unfollowDone: false,\n  // 언팔로우 유무\n  unfollowError: null,\n  logInLoading: false,\n  // 로그인 시도중\n  logInDone: false,\n  // 로그인 유무\n  logInError: null,\n  logOutLoading: false,\n  // 로그아웃 시도중\n  logOutDone: false,\n  // 로그아웃 유무\n  logOutError: null,\n  signUpLoading: false,\n  // 회원가입 시도중\n  signUpDone: false,\n  //\n  signUpError: null,\n  //\n  loadFollowersLoading: false,\n  // 팔로워 표시 시도중\n  loadFollowersDone: false,\n  //\n  loadFollowersError: null,\n  //\n  loadFollowingsLoading: false,\n  // 팔로잉 표시 시도중\n  loadFollowingsDone: false,\n  //\n  loadFollowingsError: null,\n  //\n  changeNicknameLoading: false,\n  //닉네임 변경 시도중\n  changeNicknameDone: false,\n  //\n  changeNicknameError: null,\n  //\n  me: null,\n  signUpData: {},\n  loginData: {}\n};\nexport var REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport var REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport var REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\nexport var LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport var LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport var LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\nexport var LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport var LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport var LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\nexport var LOAD_MY_INFO_REQUEST = 'LOAD_MY_INFO_REQUEST';\nexport var LOAD_MY_INFO_SUCCESS = 'LOAD_MY_INFO_SUCCESS';\nexport var LOAD_MY_INFO_FAILURE = 'LOAD_MY_INFO_FAILURE';\nexport var LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport var LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport var LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport var LOG_IN_REQUEST = 'LOG_IN_REQUEST';\nexport var LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport var LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport var LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport var LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport var LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\nexport var SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport var SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport var SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport var CHANGE_NICKNAME_REQUEST = 'CHANGE_NICKNAME_REQUEST';\nexport var CHANGE_NICKNAME_SUCCESS = 'CHANGE_NICKNAME_SUCCESS';\nexport var CHANGE_NICKNAME_FAILURE = 'CHANGE_NICKNAME_FAILURE';\nexport var FOLLOW_REQUEST = 'FOLLOW_REQUEST';\nexport var FOLLOW_SUCCESS = 'FOLLOW_SUCCESS';\nexport var FOLLOW_FAILURE = 'FOLLOW_FAILURE';\nexport var UNFOLLOW_REQUEST = 'UNFOLLOW_REQUEST';\nexport var UNFOLLOW_SUCCESS = 'UNFOLLOW_SUCCESS';\nexport var UNFOLLOW_FAILURE = 'UNFOLLOW_FAILURE';\nexport var ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport var REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport var loginAction = function loginAction(data) {\n  return function (dispatch, getState) {\n    var state = getState();\n    dispatch(loginRequestAction());\n    axios.post('/api/login').then(function (res) {\n      dispatch(loginSuccessAction(res.data));\n    })[\"catch\"](function (err) {\n      dispatch(loginFailureAction(err));\n    });\n  };\n}; //액션 생성기\n\nexport var loginRequestAction = function loginRequestAction(data) {\n  return {\n    type: LOG_IN_REQUEST,\n    data: data\n  };\n};\nexport var logoutRequestAction = function logoutRequestAction(data) {\n  return {\n    type: LOG_OUT_REQUEST //로그아웃은 데이터가 필요없다.\n\n  };\n}; // const dummyUser = (data) => ({\n//     ...data,\n//     nickname: '쩡운',\n//     id: 1,\n//     Posts: [{ id: 1 }],\n//     Followings: [{ nickname: '오징어' }, { nickname: '명태' }, { nickname: '강아지' }],\n//     Followers: [{ nickname: '오징어' }, { nickname: '명태' }, { nickname: '강아지' }],\n// });\n// reducer은 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성을 지키면서)\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case REMOVE_FOLLOWER_REQUEST:\n        draft.removeFollowerLoading = true;\n        draft.removeFollowerDone = false;\n        draft.removeFollowerError = null;\n        break;\n\n      case REMOVE_FOLLOWER_SUCCESS:\n        draft.removeFollowerLoading = false;\n        draft.removeFollowerDone = true;\n        draft.me.Followers = draft.me.Followers.filter(function (v) {\n          return v.id !== action.data.UserId;\n        });\n\n      case REMOVE_FOLLOWER_FAILURE:\n        draft.removeFollowerLoading = false;\n        draft.removeFollowerError = action.data.error;\n        break;\n\n      case LOAD_FOLLOWERS_REQUEST:\n        draft.loadFollowersLoading = true;\n        draft.loadFollowersDone = false;\n        draft.loadFollowersError = null;\n        break;\n\n      case LOAD_FOLLOWERS_SUCCESS:\n        draft.loadFollowersLoading = false;\n        draft.loadFollowersDone = true;\n        draft.me.Followers = action.data;\n\n      case LOAD_FOLLOWERS_FAILURE:\n        draft.loadFollowersLoading = false;\n        draft.loadFollowersError = action.data.error;\n        break;\n\n      case LOAD_FOLLOWINGS_REQUEST:\n        draft.loadFollowingsLoading = true;\n        draft.loadFollowingsDone = false;\n        draft.loadFollowingsError = null;\n        break;\n\n      case LOAD_FOLLOWINGS_SUCCESS:\n        draft.loadFollowingsLoading = false;\n        draft.loadFollowingsDone = true;\n        draft.me.Followings = action.data;\n        break;\n\n      case LOAD_FOLLOWINGS_FAILURE:\n        draft.loadFollowingsLoading = false;\n        draft.loadFollowingsError = action.data.error;\n        break;\n\n      case LOAD_MY_INFO_REQUEST:\n        draft.loadMyInfoLoading = true;\n        draft.loadMyInfoDone = false;\n        draft.loadMyInfoError = null;\n        break;\n\n      case LOAD_MY_INFO_SUCCESS:\n        draft.loadMyInfoLoading = false;\n        draft.loadMyInfoDone = true;\n        draft.me = action.data;\n        break;\n\n      case LOAD_MY_INFO_FAILURE:\n        draft.loadMyInfoLoading = false;\n        draft.loadMyInfoError = action.data.error;\n        break;\n\n      case LOAD_USER_REQUEST:\n        draft.loadUserLoading = true;\n        draft.loadUserError = null;\n        draft.loadUserDone = false;\n        break;\n\n      case LOAD_USER_SUCCESS:\n        draft.loadUserLoading = false;\n        draft.userInfo = action.data;\n        draft.loadUserDone = true;\n        break;\n\n      case LOAD_USER_FAILURE:\n        draft.loadUserLoading = false;\n        draft.loadUserError = action.error;\n        break;\n\n      case FOLLOW_REQUEST:\n        draft.followLoading = true;\n        draft.followDone = false;\n        draft.followError = null;\n        break;\n\n      case FOLLOW_SUCCESS:\n        draft.followLoading = false;\n        draft.followDone = true;\n        draft.me.Followings.push({\n          id: action.data.UserId\n        });\n        break;\n\n      case FOLLOW_FAILURE:\n        draft.followLoading = false;\n        draft.followError = action.error;\n        break;\n\n      case UNFOLLOW_REQUEST:\n        draft.unfollowLoading = true;\n        draft.unfollowDone = false;\n        draft.unfollowError = null;\n        break;\n\n      case UNFOLLOW_SUCCESS:\n        draft.unfollowLoading = false;\n        draft.unfollowDone = true;\n        draft.me.Followings = draft.me.Followings.filter(function (v) {\n          return v.id !== action.data.UserId;\n        });\n        break;\n\n      case UNFOLLOW_FAILURE:\n        draft.unfollowLoading = false;\n        draft.unfollowError = action.error;\n        break;\n\n      case LOG_IN_REQUEST:\n        console.log('reducer logIn');\n        draft.logInLoading = true;\n        draft.logInDone = false;\n        draft.logInError = null;\n        break;\n\n      case LOG_IN_SUCCESS:\n        draft.logInLoading = false;\n        draft.logInDone = true;\n        draft.me = action.data;\n        break;\n\n      case LOG_IN_FAILURE:\n        draft.logInLoading = false;\n        draft.logInError = action.error;\n        break;\n\n      case LOG_OUT_REQUEST:\n        draft.logOutLoading = true;\n        draft.logOutDone = false;\n        draft.logOutError = null;\n        break;\n\n      case LOG_OUT_SUCCESS:\n        draft.logOutLoading = false;\n        draft.logOutDone = true;\n        draft.me = null;\n        break;\n\n      case LOG_OUT_FAILURE:\n        draft.logOutLoading = false;\n        draft.logOutError = action.error;\n        break;\n\n      case SIGN_UP_REQUEST:\n        draft.signUpLoading = true;\n        draft.signUpDone = false;\n        draft.signUpError = null;\n        break;\n\n      case SIGN_UP_SUCCESS:\n        draft.signUpLoading = false;\n        draft.signUpDone = true;\n        break;\n\n      case SIGN_UP_FAILURE:\n        draft.signUpLoading = false;\n        draft.signUpError = action.error;\n        break;\n\n      case CHANGE_NICKNAME_REQUEST:\n        draft.changeNicknameLoading = true;\n        draft.changeNicknameDone = false;\n        draft.changeNicknameError = null;\n        break;\n\n      case CHANGE_NICKNAME_SUCCESS:\n        draft.me.nickname = action.data.nickname;\n        draft.changeNicknameLoading = false;\n        draft.changeNicknameDone = true;\n        break;\n\n      case CHANGE_NICKNAME_FAILURE:\n        draft.changeNicknameLoading = false;\n        draft.changeNicknameError = action.error;\n        break;\n\n      case ADD_POST_TO_ME:\n        draft.me.Posts.unshift({\n          id: action.data\n        });\n        break;\n      // immer를 사용하면 위에 처럼 줄일 수 있다.\n      // return {\n      //     ...state,\n      //     me: {\n      //         ...state.me,\n      //         Posts: [{ id: action.data }, ...state.me.Posts],\n      //     },\n      // };\n\n      case REMOVE_POST_OF_ME:\n        draft.me.Posts = draft.me.Posts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n      // immer를 사용하면 위에 처럼 줄일 수 있다.\n      // return {\n      //     ...state,\n      //     me: {\n      //         ...state.me,\n      //         Posts: state.me.Posts.filter((v) => v.id !== action.data),\n      //     },\n      // };\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":null,"metadata":{},"sourceType":"module"}