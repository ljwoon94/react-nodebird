{"ast":null,"code":"import { all, delay, fork, put, takeLatest, call, throttle } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`); // lastId가 null이면 0으로\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // lastId가 null이면 0으로\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    console.log('saga post');\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`); // lastId가 null이면 0으로\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    console.log('saga post');\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`); // lastId가 null이면 0으로\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    console.log('saga post');\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","call","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","axios","retweetAPI","data","post","retweet","action","result","console","log","type","err","error","response","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostAPI","get","loadPost","loadPostsAPI","lastId","loadPosts","loadUserPostsAPI","loadUserPosts","loadHashtagPostsAPI","encodeURIComponent","loadHashtagPosts","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchLoadPost","watchLoadUserPosts","watchLoadHashtagPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,IAA5C,EAAkDC,QAAlD,QAAiE,oBAAjE;AACA,SACIC,mBADJ,EACyBC,mBADzB,EAC8CC,mBAD9C,EAEIC,gBAFJ,EAEsBC,gBAFtB,EAEwCC,gBAFxC,EAGIC,iBAHJ,EAIIC,iBAJJ,EAKIC,iBALJ,EAMIC,0BANJ,EAOIC,0BAPJ,EAQIC,0BARJ,EASIC,kBATJ,EASwBC,kBATxB,EAS4CC,kBAT5C,EAUIC,iBAVJ,EAWIC,iBAXJ,EAYIC,iBAZJ,EAaIC,uBAbJ,EAcIC,uBAdJ,EAeIC,uBAfJ,EAgBIC,mBAhBJ,EAgByBC,mBAhBzB,EAiBIC,mBAjBJ,EAkBIC,eAlBJ,EAmBIC,eAnBJ,EAoBIC,eApBJ,EAqBIC,mBArBJ,EAsBIC,mBAtBJ,EAuBIC,mBAvBJ,EAwBIC,qBAxBJ,EAyBIC,qBAzBJ,EA0BIC,qBA1BJ,QA2BO,kBA3BP;AA4BA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAY,SAAQD,IAAK,UAAzB,CAAP;AACH;;AAGD,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACsC,UAAD,EAAaI,MAAM,CAACH,IAApB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM/C,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAElB,eADA;AAENW,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMjD,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEpB,eADA;AAENsB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASW,eAAT,CAAyBX,IAAzB,EAA+B;AAC3B,SAAOF,KAAK,CAACG,IAAN,CAAW,cAAX,EAA0BD,IAA1B,CAAP;AACH;;AAGD,UAAUY,YAAV,CAAuBT,MAAvB,EAA+B;AAC3B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACkD,eAAD,EAAkBR,MAAM,CAACH,IAAzB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM/C,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEZ,qBADA;AAENK,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMjD,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEd,qBADA;AAENgB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASa,WAAT,CAAqBb,IAArB,EAA2B;AACvB,SAAOF,KAAK,CAACgB,KAAN,CAAa,SAAQd,IAAK,OAA1B,CAAP;AACH;;AAGD,UAAUe,QAAV,CAAmBZ,MAAnB,EAA2B;AACvB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACoD,WAAD,EAAcV,MAAM,CAACH,IAArB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM/C,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEpC,iBADA;AAEN6B,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMjD,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEtC,iBADA;AAENwC,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASgB,aAAT,CAAuBhB,IAAvB,EAA6B;AACzB,SAAOF,KAAK,CAACmB,MAAN,CAAc,SAAQjB,IAAK,OAA3B,CAAP;AACH;;AAED,UAAUkB,UAAV,CAAqBf,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACuD,aAAD,EAAgBb,MAAM,CAACH,IAAvB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM/C,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEf,mBADA;AAENQ,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMjD,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEjB,mBADA;AAENmB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASmB,WAAT,CAAqBnB,IAArB,EAA2B;AACvB,SAAOF,KAAK,CAACsB,GAAN,CAAW,SAAQpB,IAAK,EAAxB,CAAP,CADuB,CAEvB;AACH;;AAED,UAAUqB,QAAV,CAAmBlB,MAAnB,EAA2B;AACvB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAAC0D,WAAD,EAAchB,MAAM,CAACH,IAArB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM/C,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAE3B,iBADA;AAENoB,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMjD,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAE7B,iBADA;AAEN+B,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASsB,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,SAAOzB,KAAK,CAACsB,GAAN,CAAW,iBAAgBG,MAAM,IAAI,CAAE,EAAvC,CAAP,CAD0B,CAE1B;AACH;;AAED,UAAUC,SAAV,CAAoBrB,MAApB,EAA4B;AACxB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAAC6D,YAAD,EAAenB,MAAM,CAACoB,MAAtB,CAAzB;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM/C,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAE9B,kBADA;AAENuB,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMjD,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEhC,kBADA;AAENkC,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASyB,gBAAT,CAA0BzB,IAA1B,EAAgCuB,MAAhC,EAAwC;AACpC,SAAOzB,KAAK,CAACsB,GAAN,CAAW,SAAQpB,IAAK,iBAAgBuB,MAAM,IAAI,CAAE,EAApD,CAAP,CADoC,CAEpC;AACH;;AAED,UAAUG,aAAV,CAAwBvB,MAAxB,EAAgC;AAC5B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACgE,gBAAD,EAAmBtB,MAAM,CAACH,IAA1B,EAAgCG,MAAM,CAACoB,MAAvC,CAAzB;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM/C,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAExB,uBADA;AAENiB,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMjD,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAE1B,uBADA;AAEN4B,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAAS2B,mBAAT,CAA6B3B,IAA7B,EAAmCuB,MAAnC,EAA2C;AACvC,SAAOzB,KAAK,CAACsB,GAAN,CAAW,YAAWQ,kBAAkB,CAAC5B,IAAD,CAAO,WAAUuB,MAAM,IAAI,CAAE,EAArE,CAAP,CADuC,CAEvC;AACH;;AAED,UAAUM,gBAAV,CAA2B1B,MAA3B,EAAmC;AAC/B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACkE,mBAAD,EAAsBxB,MAAM,CAACH,IAA7B,EAAmCG,MAAM,CAACoB,MAA1C,CAAzB;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM/C,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEjC,0BADA;AAEN0B,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMjD,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEnC,0BADA;AAENqC,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAAS8B,UAAT,CAAoB9B,IAApB,EAA0B;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,OAAX,EAAoBD,IAApB,CAAP;AACH;;AAED,UAAU+B,OAAV,CAAkB5B,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACqE,UAAD,EAAa3B,MAAM,CAACH,IAApB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM/C,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEvC,gBADA;AAENgC,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIA,UAAMzC,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEX,cADA;AAENI,MAAAA,IAAI,EAAEI,MAAM,CAACJ,IAAP,CAAYgC;AAFZ,KAAD,CAAT;AAIH,GAXD,CAWE,OAAOxB,GAAP,EAAY;AACV,UAAMjD,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEzC,gBADA;AAEN2C,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASiC,aAAT,CAAuBjC,IAAvB,EAA6B;AACzB,SAAOF,KAAK,CAACmB,MAAN,CAAc,SAAQjB,IAAK,EAA3B,CAAP;AACH;;AAED,UAAUkC,UAAV,CAAqB/B,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAACwE,aAAD,EAAgB9B,MAAM,CAACH,IAAvB,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAM/C,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAErB,mBADA;AAENc,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIA,UAAMzC,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEV,iBADA;AAENG,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAXD,CAWE,OAAOQ,GAAP,EAAY;AACV,UAAMjD,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAEvB,mBADA;AAENyB,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASmC,aAAT,CAAuBnC,IAAvB,EAA6B;AACzB,SAAOF,KAAK,CAACG,IAAN,CAAY,SAAQD,IAAI,CAACoC,MAAO,UAAhC,EAA2CpC,IAA3C,CAAP;AACH;;AAED,UAAUqC,UAAV,CAAqBlC,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM3C,IAAI,CAAC0E,aAAD,EAAgBhC,MAAM,CAACH,IAAvB,CAAzB;AACA,UAAMzC,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAE1C,mBADA;AAENmC,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOQ,GAAP,EAAY;AACVH,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACA,UAAMjD,GAAG,CAAC;AACNgD,MAAAA,IAAI,EAAE5C,mBADA;AAEN8C,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUsC,YAAV,GAAyB;AACrB,QAAM9E,UAAU,CAAC4B,eAAD,EAAkBc,OAAlB,CAAhB;AACH;;AAED,UAAUqC,iBAAV,GAA8B;AAC1B,QAAM/E,UAAU,CAACkC,qBAAD,EAAwBkB,YAAxB,CAAhB;AACH;;AAED,UAAU4B,aAAV,GAA0B;AACtB,QAAMhF,UAAU,CAACU,iBAAD,EAAoB6C,QAApB,CAAhB;AACH;;AAED,UAAU0B,eAAV,GAA4B;AACxB,QAAMjF,UAAU,CAAC+B,mBAAD,EAAsB2B,UAAtB,CAAhB;AACH;;AAED,UAAUwB,cAAV,GAA2B;AACvB,QAAMhF,QAAQ,CAAC,IAAD,EAAMc,kBAAN,EAA0BgD,SAA1B,CAAd;AACH;;AAED,UAAUmB,aAAV,GAA0B;AACtB,QAAMnF,UAAU,CAACmB,iBAAD,EAAoB0C,QAApB,CAAhB;AACH;;AAED,UAAUuB,kBAAV,GAA+B;AAC3B,QAAMlF,QAAQ,CAAC,IAAD,EAAMoB,uBAAN,EAA+B4C,aAA/B,CAAd;AACH;;AAED,UAAUmB,qBAAV,GAAkC;AAC9B,QAAMnF,QAAQ,CAAC,IAAD,EAAMW,0BAAN,EAAkCwD,gBAAlC,CAAd;AACH;;AAED,UAAUiB,YAAV,GAAyB;AACrB,QAAMtF,UAAU,CAACO,gBAAD,EAAmBgE,OAAnB,CAAhB;AACH;;AAED,UAAUgB,eAAV,GAA4B;AACxB,QAAMvF,UAAU,CAACyB,mBAAD,EAAsBiD,UAAtB,CAAhB;AACH;;AAGD,UAAUc,eAAV,GAA4B;AACxB,QAAMxF,UAAU,CAACI,mBAAD,EAAsByE,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUY,QAAV,GAAqB;AAChC,QAAM7F,GAAG,CAAC,CACNE,IAAI,CAACgF,YAAD,CADE,EAENhF,IAAI,CAACiF,iBAAD,CAFE,EAGNjF,IAAI,CAACkF,aAAD,CAHE,EAINlF,IAAI,CAACmF,eAAD,CAJE,EAKNnF,IAAI,CAACwF,YAAD,CALE,EAMNxF,IAAI,CAACqF,aAAD,CANE,EAONrF,IAAI,CAACoF,cAAD,CAPE,EAQNpF,IAAI,CAACsF,kBAAD,CARE,EASNtF,IAAI,CAACuF,qBAAD,CATE,EAUNvF,IAAI,CAACyF,eAAD,CAVE,EAWNzF,IAAI,CAAC0F,eAAD,CAXE,CAAD,CAAT;AAaH","sourcesContent":["import { all, delay, fork, put, takeLatest ,call, throttle} from \"redux-saga/effects\";\r\nimport {\r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS,\r\n    LOAD_POST_FAILURE,\r\n    LOAD_POST_REQUEST,\r\n    LOAD_POST_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE, REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    RETWEET_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport axios from 'axios';\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images',data);\r\n}\r\n\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get(`/post/${data}`);\r\n    // lastId가 null이면 0으로\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n    // lastId가 null이면 0으로\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n    // lastId가 null이면 0으로\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\r\n    // lastId가 null이면 0으로\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000,LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield throttle(5000,LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000,LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}