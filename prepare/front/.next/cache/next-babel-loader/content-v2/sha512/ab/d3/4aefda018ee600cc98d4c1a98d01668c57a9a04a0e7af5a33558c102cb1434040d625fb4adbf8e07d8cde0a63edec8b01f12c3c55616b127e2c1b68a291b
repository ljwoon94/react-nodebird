{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\job\\\\react-nodebird\\\\prepare\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../components/AppLayout'; //next에선 import React를 반드시 할 필요가 없다.\n//next는 pages 폴더를 인식해서 개별적으로 페이지로 만든다.\n\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\nimport { END } from '@redux-saga/core';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    function onScroll() {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll); //종료하지 않으면 큰일남.\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]); // 스크롤 끝까지 내릴시 로딩 후 이미지 가져오기\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 20\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 39\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this) // AppLayout은 components 폴더에 있다.\n  // AppLayout 안에 있는 div는 {children}이 된다. \n  ;\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log('getServerSideProps start');\n  const cookie = context.req ? context.req.headers.cookie : ''; //쿠키정보가 여기에 들어감.\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise(); // context.store.dispatch(END);\n  // await context.store.sagaTask.toPromise();\n  // 문장이 존재해야 success가 응답함.\n});\nexport default Home; // npm run dev 라고 입력하면 package.json 에 scripts에 정의해둔\n// 스크립트가 실행된다. dev 말고 정의해둔 값을 입력하면 스크립트 실행된다.\n// antd, antd icon 따로 설치 \n// antd는 ant design으로 중국 디자인 사이트\n// antd 안먹히면 @ctrl/tinycolor 3.3.1 추가해라\n// next를 사용하는 이유는 서버사이드 렌더링 때문","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","wrapper","END","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","retweetError","post","alert","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map","getServerSideProps","context","console","log","cookie","req","headers","store","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport AppLayout from '../components/AppLayout';\r\n//next에선 import React를 반드시 할 필요가 없다.\r\n//next는 pages 폴더를 인식해서 개별적으로 페이지로 만든다.\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport wrapper from '../store/configureStore';\r\nimport { END } from '@redux-saga/core';\r\n\r\nconst Home = () => {\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state) => state.user);\r\n    const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector((state) => state.post);\r\n\r\n    useEffect(()=>{\r\n        if(retweetError){\r\n            alert(retweetError);\r\n        }\r\n    },[retweetError]);\r\n\r\n    \r\n    useEffect(() => {\r\n        function onScroll() {\r\n            if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n            //종료하지 않으면 큰일남.\r\n        };\r\n    }, [hasMorePosts, loadPostsLoading, mainPosts]);\r\n    // 스크롤 끝까지 내릴시 로딩 후 이미지 가져오기\r\n\r\n    return (\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post) => (<PostCard key={post.id} post={post} />))}\r\n        </AppLayout>\r\n        // AppLayout은 components 폴더에 있다.\r\n        // AppLayout 안에 있는 div는 {children}이 된다. \r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context)=>{\r\n    console.log('getServerSideProps start');\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    //쿠키정보가 여기에 들어감.\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n    // context.store.dispatch(END);\r\n    // await context.store.sagaTask.toPromise();\r\n    // 문장이 존재해야 success가 응답함.\r\n});\r\n\r\nexport default Home;\r\n\r\n\r\n// npm run dev 라고 입력하면 package.json 에 scripts에 정의해둔\r\n// 스크립트가 실행된다. dev 말고 정의해둔 값을 입력하면 스크립트 실행된다.\r\n// antd, antd icon 따로 설치 \r\n// antd는 ant design으로 중국 디자인 사이트\r\n// antd 안먹히면 @ctrl/tinycolor 3.3.1 추가해라\r\n// next를 사용하는 이유는 서버사이드 렌더링 때문\r\n"]},"metadata":{},"sourceType":"module"}