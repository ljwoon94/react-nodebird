{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, createStore, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from '../sagas';\nimport reducer from '../reducers';\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      console.log(action);\n      return next(action);\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) //배포용\n  : composeWithDevTools(applyMiddleware.apply(void 0, middlewares)); //개발용\n\n  var store = createStore(reducer, enhancer); //enhancer 미들웨어 액션기록을 보기위해 사용\n  //redux-devtools-extension\n\n  store.sagaTask = sagaMiddleware.run(rootSaga); //sagaTask 서바사이드 렌더링을 하기위해 필요\n\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: process.env.NODE === 'development'\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","createStore","compose","composeWithDevTools","createSagaMiddleware","rootSaga","reducer","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug","process","env","NODE"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAaC,QAAb,QAAaA,QAAb;AAAA,SAA4B,UAACC,IAAD;AAAA,WAAU,UAACC,MAAD,EAAY;AACvEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAOD,IAAI,CAACC,MAAD,CAAX;AACH,KAHoD;AAAA,GAA5B;AAAA,CAAzB;;AAKA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,MAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AACA,MAAMY,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB;AACA,MAAMU,QAAQ,GAAG,QACXf,OAAO,CAACF,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CADI,CAC+B;AAD/B,IAEXb,mBAAmB,CAACH,eAAe,MAAf,SAAmBgB,WAAnB,CAAD,CAFzB,CAHyB,CAKoC;;AAC7D,MAAME,KAAK,GAAGjB,WAAW,CAACK,OAAD,EAAUW,QAAV,CAAzB,CANyB,CAOzB;AACA;;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBf,QAAnB,CAAjB,CATyB,CAUzB;;AACA,SAAOa,KAAP;AACH,CAZD;;AAcA,IAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAiB;AAC1CQ,EAAAA,KAAK,EAAEC,OAAO,CAACC,GAAR,CAAYC,IAAZ,KAAqB;AADc,CAAjB,CAA7B;AAGA,eAAeJ,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { applyMiddleware, createStore, compose } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../sagas'\r\nimport reducer from '../reducers';\r\n\r\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\r\n    console.log(action);\r\n    return next(action);\r\n};\r\n\r\nconst configureStore = () => {\r\n    const sagaMiddleware = createSagaMiddleware()\r\n    const middlewares = [sagaMiddleware, loggerMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n        ? compose(applyMiddleware(...middlewares))  //배포용\r\n        : composeWithDevTools(applyMiddleware(...middlewares))   //개발용\r\n    const store = createStore(reducer, enhancer);\r\n    //enhancer 미들웨어 액션기록을 보기위해 사용\r\n    //redux-devtools-extension\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    //sagaTask 서바사이드 렌더링을 하기위해 필요\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n    debug: process.env.NODE === 'development',\r\n});\r\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}