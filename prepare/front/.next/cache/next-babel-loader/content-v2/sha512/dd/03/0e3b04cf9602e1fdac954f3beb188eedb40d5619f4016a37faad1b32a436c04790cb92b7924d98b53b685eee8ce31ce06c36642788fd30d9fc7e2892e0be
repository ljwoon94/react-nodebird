{"ast":null,"code":"var _s = $RefreshSig$();\n\n// post/[id]sms\n// post[1], post[2], post[3] 순서대로 올라감\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport PostCard from '../../components/PostCard';\nimport AppLayout from '../../components/AppLayout';\n\nvar Post = function Post() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      singlePost = _useSelector.singlePost;\n\n  var router = useRouter();\n  var id = router.query.id; // return (\n  //     <AppLayout>\n  //         <PostCard post={singlePost} />\n  //     </AppLayout>\n  // );\n  //     return (\n  //         <AppLayout>\n  //         <Head>\n  //             <title>\n  //             {singlePost.User.nickname}\n  //             님의 글\n  //             </title>\n  //             <meta name=\"description\" content={singlePost.content} />\n  //             <meta property=\"og:title\" content={`${singlePost.User.nickname}님의 게시글`} />\n  //             <meta property=\"og:description\" content={singlePost.content} />\n  //             <meta property=\"og:image\" content={singlePost.Images[0] ? singlePost.Images[0].src : 'https://nodebird.com/favicon.ico'} />\n  //             <meta property=\"og:url\" content={`https://nodebird.com/post/${id}`} />\n  //         </Head>\n  //         <PostCard post={singlePost} />\n  //         </AppLayout>\n  //     );\n}; // // export async function getStaticPaths() {\n// //   return {\n// //     paths: [\n// //       { params: { id: '1' } },\n// //       { params: { id: '2' } },\n// //       { params: { id: '3' } },\n// //       { params: { id: '4' } },\n// //     ],\n// //     fallback: true,\n// //   };\n// // }\n\n\n_s(Post, \"sP8wn12/G/P66EFqz71rMMtIwRA=\", false, function () {\n  return [useSelector, useRouter];\n});\n\n_c = Post;\nexport var __N_SSP = true;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/pages/post/[id].js"],"names":["React","useSelector","Head","useRouter","PostCard","AppLayout","Post","state","post","singlePost","router","id","query"],"mappings":";;AAAA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAMA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;;AAGA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AAAA,qBACQL,WAAW,CAAC,UAACM,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CADnB;AAAA,MACPC,UADO,gBACPA,UADO;;AAEf,MAAMC,MAAM,GAAGP,SAAS,EAAxB;AAFe,MAGPQ,EAHO,GAGAD,MAAM,CAACE,KAHP,CAGPD,EAHO,EAKf;AACA;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,CA3BD,C,CA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAvCML,I;UACqBL,W,EACRE,S;;;KAFbG,I;;AA4DN,eAAeA,IAAf","sourcesContent":["// post/[id]sms\r\n// post[1], post[2], post[3] 순서대로 올라감\r\n\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Head from 'next/head';\r\nimport { useRouter } from 'next/router';\r\nimport { END } from 'redux-saga';\r\n\r\nimport axios from 'axios';\r\nimport { LOAD_POST_REQUEST } from '../../reducers/post';\r\nimport wrapper from '../../store/configureStore';\r\nimport PostCard from '../../components/PostCard';\r\nimport AppLayout from '../../components/AppLayout';\r\nimport { LOAD_MY_INFO_REQUEST } from '../../reducers/user';\r\n\r\nconst Post = () => {\r\n    const { singlePost } = useSelector((state) => state.post);\r\n    const router = useRouter();\r\n    const { id } = router.query;\r\n\r\n    // return (\r\n    //     <AppLayout>\r\n    //         <PostCard post={singlePost} />\r\n    //     </AppLayout>\r\n    // );\r\n\r\n//     return (\r\n//         <AppLayout>\r\n//         <Head>\r\n//             <title>\r\n//             {singlePost.User.nickname}\r\n//             님의 글\r\n//             </title>\r\n//             <meta name=\"description\" content={singlePost.content} />\r\n//             <meta property=\"og:title\" content={`${singlePost.User.nickname}님의 게시글`} />\r\n//             <meta property=\"og:description\" content={singlePost.content} />\r\n//             <meta property=\"og:image\" content={singlePost.Images[0] ? singlePost.Images[0].src : 'https://nodebird.com/favicon.ico'} />\r\n//             <meta property=\"og:url\" content={`https://nodebird.com/post/${id}`} />\r\n//         </Head>\r\n//         <PostCard post={singlePost} />\r\n//         </AppLayout>\r\n//     );\r\n};\r\n\r\n// // export async function getStaticPaths() {\r\n// //   return {\r\n// //     paths: [\r\n// //       { params: { id: '1' } },\r\n// //       { params: { id: '2' } },\r\n// //       { params: { id: '3' } },\r\n// //       { params: { id: '4' } },\r\n// //     ],\r\n// //     fallback: true,\r\n// //   };\r\n// // }\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    console.log(context);\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_POST_REQUEST,\r\n        data: context.params.id,\r\n    });\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n    return { props: {} };\r\n});\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}