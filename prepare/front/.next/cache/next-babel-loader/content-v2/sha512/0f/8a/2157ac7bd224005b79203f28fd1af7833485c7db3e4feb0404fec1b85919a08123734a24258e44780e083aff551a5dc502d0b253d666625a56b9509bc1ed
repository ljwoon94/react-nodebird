{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '이정운'\n    },\n    content: '첫 번째 게시글 #해시태크 #익스프레스',\n    Images: [{\n      src: 'https://3.bp.blogspot.com/-paIvI6xdE2k/WovHemFi6jI/AAAAAAACN20/6hBeNS_XVO0idJlKvTR_hKhDsaob7pdOgCLcBGAs/s1600/3.gif'\n    }, {\n      src: 'https://coinpan.com/files/attach/images/198/013/866/096/b5a203116c9ff0d11a13d9bb43f7bb39.gif'\n    }, {\n      src: 'http://t1.daumcdn.net/thumb/R1024x0/?fname=http://cfile271.uf.daum.net/image/276DCA3C5586B77E26FDB2'\n    }],\n    Comments: [{\n      User: {\n        nickname: '쩡운'\n      },\n      content: '호호호호'\n    }, {\n      User: {\n        nickname: '쩡훈'\n      },\n      content: '헝헝헝헝'\n    }]\n  }],\n  imagePaths: [],\n  // imagePaths는 이미지 업로드할때 생기는 경로가 저장\n  PostAdded: false // 개체 추가시 true로 바뀜\n\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nconst dummyPost = {\n  id: 2,\n  content: '더미데이터 입니다.',\n  User: {\n    id: 1,\n    nickname: '쩡쩡훈'\n  },\n  Images: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n};\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost, ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return {\n        addCommentLoading: false,\n        addCommentError: action.error\n      };\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return {\n        addCommentLoading: false,\n        addCommentError: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/reducers/post.js"],"names":["initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","PostAdded","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","addPost","data","type","dummyPost","addPostLoading","addPostDone","addPostError","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addComment","reducer","state","action","addCommentLoading","addCommentError","error","addCommentDone"],"mappings":"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","sourcesContent":["export const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: '이정운',\r\n        },\r\n        content: '첫 번째 게시글 #해시태크 #익스프레스',\r\n        Images: [{\r\n            src: 'https://3.bp.blogspot.com/-paIvI6xdE2k/WovHemFi6jI/AAAAAAACN20/6hBeNS_XVO0idJlKvTR_hKhDsaob7pdOgCLcBGAs/s1600/3.gif',\r\n        }, {\r\n            src: 'https://coinpan.com/files/attach/images/198/013/866/096/b5a203116c9ff0d11a13d9bb43f7bb39.gif',\r\n        }, {\r\n            src: 'http://t1.daumcdn.net/thumb/R1024x0/?fname=http://cfile271.uf.daum.net/image/276DCA3C5586B77E26FDB2',\r\n        }],\r\n        Comments: [{\r\n            User: {\r\n                nickname: '쩡운'\r\n            },\r\n            content: '호호호호',\r\n        }, {\r\n            User: {\r\n                nickname: '쩡훈',\r\n            },\r\n            content: '헝헝헝헝',\r\n        }]\r\n    }],\r\n    imagePaths: [],\r\n    // imagePaths는 이미지 업로드할때 생기는 경로가 저장\r\n    PostAdded: false,\r\n    // 개체 추가시 true로 바뀜\r\n}\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = {\r\n    id: 2,\r\n    content: '더미데이터 입니다.',\r\n    User: {\r\n        id: 1,\r\n        nickname: '쩡쩡훈'\r\n    },\r\n    Images: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n};\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            }\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost, ...state.mainPosts],\r\n                addPostLoading: false,\r\n                addPostDone: true,\r\n            }\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                addCommentLoading: false,\r\n                addCommentError: action.error,\r\n            }\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                addCommentDone: false,\r\n                addCommentError: null,\r\n            }\r\n        case ADD_COMMENT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: false,\r\n                addCommentDone: true,\r\n            }\r\n        case ADD_COMMENT_FAILURE:\r\n            return {\r\n                addCommentLoading: false,\r\n                addCommentError: action.error,\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}