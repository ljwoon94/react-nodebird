{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '이정운'\n    },\n    content: '첫 번째 게시글 #해시태크 #익스프레스',\n    Images: [{\n      id: shordId.generate(),\n      src: 'https://3.bp.blogspot.com/-paIvI6xdE2k/WovHemFi6jI/AAAAAAACN20/6hBeNS_XVO0idJlKvTR_hKhDsaob7pdOgCLcBGAs/s1600/3.gif'\n    }, {\n      id: shordId.generate(),\n      src: 'https://coinpan.com/files/attach/images/198/013/866/096/b5a203116c9ff0d11a13d9bb43f7bb39.gif'\n    }, {\n      id: shordId.generate(),\n      src: 'http://t1.daumcdn.net/thumb/R1024x0/?fname=http://cfile271.uf.daum.net/image/276DCA3C5586B77E26FDB2'\n    }],\n    Comments: [{\n      id: shordId.generate(),\n      User: {\n        id: shordId.generate(),\n        nickname: '쩡운'\n      },\n      content: '호호호호'\n    }, {\n      id: shordId.generate(),\n      User: {\n        id: shordId.generate(),\n        nickname: '쩡훈'\n      },\n      content: '헝헝헝헝'\n    }]\n  }],\n  imagePaths: [],\n  // imagePaths는 이미지 업로드할때 생기는 경로가 저장\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const ADD_POST_TO_ME = 'ADD_PPOST_TO_ME';\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  User: {\n    id: 1,\n    nickname: '이정운'\n  },\n  content: data.content,\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '이정운'\n  }\n});\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      console.log('reducer post');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      console.log('reducer post');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n\n    case REMOVE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        removePostLoading: false,\n        removePostDone: true\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: false,\n        removePostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n        const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n        post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        const mainPosts = [...state.mainPosts];\n        mainPosts[postIndex] = post;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n      ;\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","shordId","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","console","log","error","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\n\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: '이정운',\r\n        },\r\n        content: '첫 번째 게시글 #해시태크 #익스프레스',\r\n        Images: [{\r\n            id: shordId.generate(),\r\n            src: 'https://3.bp.blogspot.com/-paIvI6xdE2k/WovHemFi6jI/AAAAAAACN20/6hBeNS_XVO0idJlKvTR_hKhDsaob7pdOgCLcBGAs/s1600/3.gif',\r\n        }, {\r\n            id: shordId.generate(),\r\n            src: 'https://coinpan.com/files/attach/images/198/013/866/096/b5a203116c9ff0d11a13d9bb43f7bb39.gif',\r\n        }, {\r\n            id: shordId.generate(),\r\n            src: 'http://t1.daumcdn.net/thumb/R1024x0/?fname=http://cfile271.uf.daum.net/image/276DCA3C5586B77E26FDB2',\r\n        }],\r\n        Comments: [{\r\n            id: shordId.generate(),\r\n            User: {\r\n                id: shordId.generate(),\r\n                nickname: '쩡운'\r\n            },\r\n            content: '호호호호',\r\n        }, {\r\n            id: shordId.generate(),\r\n            User: {\r\n                id: shordId.generate(),\r\n                nickname: '쩡훈',\r\n            },\r\n            content: '헝헝헝헝',\r\n        }],\r\n    }],\r\n    imagePaths: [],\r\n    // imagePaths는 이미지 업로드할때 생기는 경로가 저장\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n};\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_PPOST_TO_ME';\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    User: {\r\n        id: 1,\r\n        nickname: '이정운',\r\n    },\r\n    content: data.content,\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: '이정운',\r\n    },\r\n});\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            console.log('reducer post');\r\n            return {\r\n                ...state,\r\n                addPostLoading: true,\r\n                addPostDone: false,\r\n                addPostError: null,\r\n            };\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                addPostLoading: false,\r\n                addPostDone: true,\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error,\r\n            };\r\n        case REMOVE_POST_REQUEST:\r\n            console.log('reducer post');\r\n            return {\r\n                ...state,\r\n                removePostLoading: true,\r\n                removePostDone: false,\r\n                removePostError: null,\r\n            };\r\n        case REMOVE_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\r\n                removePostLoading: false,\r\n                removePostDone: true,\r\n            };\r\n        case REMOVE_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                removePostLoading: false,\r\n                removePostError: action.error,\r\n            };\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                addCommentDone: false,\r\n                addCommentError: null,\r\n            };\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            const post = { ...state.mainPosts[postIndex] };\r\n            post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = post;\r\n            return {\r\n                ...state,\r\n                mainPosts,\r\n                addCommentLoading: false,\r\n                addCommentDone: true,\r\n            };\r\n        };\r\n        case ADD_COMMENT_FAILURE:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: false,\r\n                addCommentError: action.error,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}