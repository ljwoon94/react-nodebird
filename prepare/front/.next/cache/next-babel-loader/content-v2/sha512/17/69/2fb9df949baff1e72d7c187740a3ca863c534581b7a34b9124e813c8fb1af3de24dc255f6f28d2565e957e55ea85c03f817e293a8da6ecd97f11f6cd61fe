{"ast":null,"code":"import _defineProperty from \"C:/job/react-nodebird/prepare/front/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducer } from 'redux'; //리듀서끼리 합치게 해준다.\n\nimport user from './user';\nimport post from './post';\nvar initialState = {\n  user: {},\n  post: {}\n}; //(이전상태, 액션) => 다음상태\n\nvar rootReducer = combineReducer({\n  index: function index() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case HYDRATE:\n        console.log('HYDRATE', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n      // HYDRATE를 위해 인덕스 리덕션을 사용\n\n      default:\n        return state;\n      // default: return state;를 안적으면 리턴값이 undifined가 뜬다.\n    }\n  },\n  user: user,\n  post: post\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducer","user","post","initialState","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,cAAT,QAA+B,OAA/B,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,IAAMC,YAAY,GAAG;AACjBF,EAAAA,IAAI,EAAE,EADW;AAIjBC,EAAAA,IAAI,EAAE;AAJW,CAArB,C,CAWA;;AACA,IAAME,WAAW,GAAGJ,cAAc,CAAC;AAC/BK,EAAAA,KAAK,EAAE,iBAAwB;AAAA,QAAvBC,KAAuB,uEAAf,EAAe;AAAA,QAAXC,MAAW;;AAC3B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKT,OAAL;AACIU,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CACOD,KADP,GAEOC,MAAM,CAACI,OAFd;AAIJ;;AACA;AAAS,eAAOL,KAAP;AACT;AATJ;AAWH,GAb8B;AAc/BL,EAAAA,IAAI,EAAJA,IAd+B;AAe/BC,EAAAA,IAAI,EAAJA;AAf+B,CAAD,CAAlC;AAkBA,eAAeE,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\nimport { combineReducer } from 'redux';\r\n//리듀서끼리 합치게 해준다.\r\nimport user from './user';\r\nimport post from './post';\r\n\r\nconst initialState = {\r\n    user: {\r\n\r\n    },\r\n    post: {\r\n\r\n    }\r\n};\r\n\r\n\r\n\r\n//(이전상태, 액션) => 다음상태\r\nconst rootReducer = combineReducer({\r\n    index: (state = {}, action) => {\r\n        switch (action.type) {\r\n            case HYDRATE:\r\n                console.log('HYDRATE', action);\r\n                return {\r\n                    ...state,\r\n                    ...action.payload,\r\n                };\r\n            // HYDRATE를 위해 인덕스 리덕션을 사용\r\n            default: return state;\r\n            // default: return state;를 안적으면 리턴값이 undifined가 뜬다.\r\n        }\r\n    },\r\n    user,\r\n    post,\r\n});\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}