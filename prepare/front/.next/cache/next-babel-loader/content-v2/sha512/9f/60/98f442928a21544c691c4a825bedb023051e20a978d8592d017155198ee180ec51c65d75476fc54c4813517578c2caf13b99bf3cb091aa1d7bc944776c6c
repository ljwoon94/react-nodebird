{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOAD_MY_INFO_REQUEST, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from \"../reducers/user\";\nimport axios from 'axios';\n\nfunction followAPI() {\n  return axios.post('/api/follow');\n}\n\nfunction* follow(action) {\n  try {\n    console.log('saga follow'); //const result = yield call(logInAPI, action.data);\n    //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \n\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI() {\n  return axios.post('/api/unfollow');\n}\n\nfunction* unfollow(action) {\n  try {\n    console.log('saga unfollow');\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga logIn');\n    const result = yield call(logInAPI, action.data); //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \n    // npm i passport passport-local 로그인를 다루는 미들웨어\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  } // 성공결과는 result.data\n  // 실패결과는 err.response.data\n  // put은 디스패치라 생각하면 좋다\n\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); //작동순서 프론트 pages의 onSubmit에 데이터(아이디, 닉네임, 비밀번호)가\n    //SIGNUPREQ 를 통해 리덕스랑 사가 실행, 데이터 함수는 action으로가\n    //signUpAPI의 데이터로 이동 url을 통해 전송\n\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n} // yield take('LOG_IN_REQUEST');은 LOG_IN_REQUEST이 실행될때까지 기다리겠다.\n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadMyInfo), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}\n;","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/sagas/user.js"],"names":["all","call","delay","fork","put","takeLatest","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","LOAD_MY_INFO_REQUEST","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","axios","followAPI","post","follow","action","console","log","type","data","err","error","response","unfollowAPI","unfollow","logInAPI","logIn","result","logOutAPI","logOut","signUpAPI","signUp","watchLoadMyInfo","loadMyInfo","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport { FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOAD_MY_INFO_REQUEST, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from \"../reducers/user\";\r\nimport axios from 'axios';\r\n\r\nfunction followAPI() {\r\n    return axios.post('/api/follow');\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        console.log('saga follow');\r\n        //const result = yield call(logInAPI, action.data);\r\n        //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \r\n        yield delay(1000);\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unfollowAPI() {\r\n    return axios.post('/api/unfollow');\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        console.log('saga unfollow');\r\n        yield delay(1000);\r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/user/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        console.log('saga logIn');\r\n        const result = yield call(logInAPI, action.data);\r\n        //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \r\n        // npm i passport passport-local 로그인를 다루는 미들웨어\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n\r\n    // 성공결과는 result.data\r\n    // 실패결과는 err.response.data\r\n    // put은 디스패치라 생각하면 좋다\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/user/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n\r\n        yield call(logOutAPI);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    return axios.post('/user', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        const result = yield call(signUpAPI, action.data);\r\n        //작동순서 프론트 pages의 onSubmit에 데이터(아이디, 닉네임, 비밀번호)가\r\n        //SIGNUPREQ 를 통해 리덕스랑 사가 실행, 데이터 함수는 action으로가\r\n        //signUpAPI의 데이터로 이동 url을 통해 전송\r\n        console.log(result);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLoadMyInfo() {\r\n    yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\r\n}\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n// yield take('LOG_IN_REQUEST');은 LOG_IN_REQUEST이 실행될때까지 기다리겠다.\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLoadMyInfo),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ]);\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}