{"ast":null,"code":"import _regeneratorRuntime from \"C:/job/react-nodebird/prepare/front/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, delay, fork, put, takeLatest, call, throttle } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\n\nfunction retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log('saga post');\n          _context.next = 7;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 14;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          console.log('saga post');\n          _context2.next = 7;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context2.next = 14;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n          _context2.next = 14;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          console.log('saga post');\n          _context3.next = 7;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context4.sent;\n          console.log('saga post');\n          _context4.next = 7;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context4.next = 14;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 14;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 9]]);\n}\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/post/\".concat(data)); // lastId가 null이면 0으로\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadPostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          console.log('saga post');\n          _context5.next = 7;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context5.next = 14;\n          break;\n\n        case 9:\n          _context5.prev = 9;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 14;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 9]]);\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(\"/posts?lastId=\".concat(lastId || 0)); // lastId가 null이면 0으로\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(loadPostsAPI, action.lastId);\n\n        case 3:\n          result = _context6.sent;\n          console.log('saga post');\n          _context6.next = 7;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context6.next = 14;\n          break;\n\n        case 9:\n          _context6.prev = 9;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 14;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 9]]);\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(\"/user/\".concat(data, \"/posts?lastId=\").concat(lastId || 0)); // lastId가 null이면 0으로\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadUserPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context7.sent;\n          console.log('saga post');\n          _context7.next = 7;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context7.next = 14;\n          break;\n\n        case 9:\n          _context7.prev = 9;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 14;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 9]]);\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(data), \"?lastId=\").concat(lastId || 0)); // lastId가 null이면 0으로\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context8.sent;\n          console.log('saga post');\n          _context8.next = 7;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context8.next = 14;\n          break;\n\n        case 9:\n          _context8.prev = 9;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 14;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 9]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          console.log('saga post');\n          _context9.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context9.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 9:\n          _context9.next = 15;\n          break;\n\n        case 11:\n          _context9.prev = 11;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 11]]);\n}\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          _context10.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context10.sent;\n          console.log('saga post');\n          _context10.next = 7;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context10.next = 9;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 9:\n          _context10.next = 15;\n          break;\n\n        case 11:\n          _context10.prev = 11;\n          _context10.t0 = _context10[\"catch\"](0);\n          _context10.next = 15;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context10.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 11]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context11.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.next = 2;\n          return all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/sagas/post.js"],"names":["retweet","uploadImages","likePost","unlikePost","loadPost","loadPosts","loadUserPosts","loadHashtagPosts","addPost","removePost","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchLoadPost","watchLoadUserPosts","watchLoadHashtagPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","delay","fork","put","takeLatest","call","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","axios","retweetAPI","data","post","action","result","console","log","type","error","response","uploadImagesAPI","likePostAPI","patch","unlikePostAPI","loadPostAPI","get","loadPostsAPI","lastId","loadUserPostsAPI","loadHashtagPostsAPI","encodeURIComponent","addPostAPI","id","removePostAPI","addCommentAPI","postId"],"mappings":";;oDAqCUA,O;qDAsBAC,Y;qDAsBAC,Q;qDAqBAC,U;qDAsBAC,Q;qDAsBAC,S;qDAsBAC,a;qDAsBAC,gB;qDAqBAC,O;sDAwBAC,U;sDAwBAC,U;sDAgBAC,Y;sDAIAC,iB;sDAIAC,a;sDAIAC,e;sDAIAC,c;sDAIAC,a;sDAIAC,kB;sDAIAC,qB;sDAIAC,Y;sDAIAC,e;sDAKAC,e;sDAIeC,Q;;AAhUzB,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,IAA5C,EAAkDC,QAAlD,QAAiE,oBAAjE;AACA,SACIC,mBADJ,EACyBC,mBADzB,EAC8CC,mBAD9C,EAEIC,gBAFJ,EAEsBC,gBAFtB,EAEwCC,gBAFxC,EAGIC,iBAHJ,EAIIC,iBAJJ,EAKIC,iBALJ,EAMIC,0BANJ,EAOIC,0BAPJ,EAQIC,0BARJ,EASIC,kBATJ,EASwBC,kBATxB,EAS4CC,kBAT5C,EAUIC,iBAVJ,EAWIC,iBAXJ,EAYIC,iBAZJ,EAaIC,uBAbJ,EAcIC,uBAdJ,EAeIC,uBAfJ,EAgBIC,mBAhBJ,EAgByBC,mBAhBzB,EAiBIC,mBAjBJ,EAkBIC,eAlBJ,EAmBIC,eAnBJ,EAoBIC,eApBJ,EAqBIC,mBArBJ,EAsBIC,mBAtBJ,EAuBIC,mBAvBJ,EAwBIC,qBAxBJ,EAyBIC,qBAzBJ,EA0BIC,qBA1BJ,QA2BO,kBA3BP;AA4BA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOF,KAAK,CAACG,IAAN,iBAAoBD,IAApB,cAAP;AACH;;AAGD,SAAUnE,OAAV,CAAkBqE,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMzC,IAAI,CAACsC,UAAD,EAAaG,MAAM,CAACF,IAApB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAHR;AAIQ,iBAAM9C,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEjB,eADA;AAENW,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQI,UAAAA,OAAO,CAACG,KAAR;AATR;AAUQ,iBAAMhD,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEnB,eADA;AAENoB,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASS,eAAT,CAAyBT,IAAzB,EAA+B;AAC3B,SAAOF,KAAK,CAACG,IAAN,CAAW,cAAX,EAA0BD,IAA1B,CAAP;AACH;;AAGD,SAAUlE,YAAV,CAAuBoE,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMzC,IAAI,CAACgD,eAAD,EAAkBP,MAAM,CAACF,IAAzB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAHR;AAIQ,iBAAM9C,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEX,qBADA;AAENK,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQI,UAAAA,OAAO,CAACG,KAAR;AATR;AAUQ,iBAAMhD,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEb,qBADA;AAENc,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASU,WAAT,CAAqBV,IAArB,EAA2B;AACvB,SAAOF,KAAK,CAACa,KAAN,iBAAqBX,IAArB,WAAP;AACH;;AAGD,SAAUjE,QAAV,CAAmBmE,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMzC,IAAI,CAACiD,WAAD,EAAcR,MAAM,CAACF,IAArB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAHR;AAIQ,iBAAM9C,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEnC,iBADA;AAEN6B,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQI,UAAAA,OAAO,CAACG,KAAR;AATR;AAUQ,iBAAMhD,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAErC,iBADA;AAENsC,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASY,aAAT,CAAuBZ,IAAvB,EAA6B;AACzB,SAAOF,KAAK,UAAL,iBAAsBE,IAAtB,WAAP;AACH;;AAED,SAAUhE,UAAV,CAAqBkE,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMzC,IAAI,CAACmD,aAAD,EAAgBV,MAAM,CAACF,IAAvB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAHR;AAIQ,iBAAM9C,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEd,mBADA;AAENQ,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQI,UAAAA,OAAO,CAACG,KAAR;AATR;AAUQ,iBAAMhD,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEhB,mBADA;AAENiB,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASa,WAAT,CAAqBb,IAArB,EAA2B;AACvB,SAAOF,KAAK,CAACgB,GAAN,iBAAmBd,IAAnB,EAAP,CADuB,CAEvB;AACH;;AAED,SAAU/D,QAAV,CAAmBiE,MAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMzC,IAAI,CAACoD,WAAD,EAAcX,MAAM,CAACF,IAArB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAHR;AAIQ,iBAAM9C,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAE1B,iBADA;AAENoB,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQI,UAAAA,OAAO,CAACG,KAAR;AATR;AAUQ,iBAAMhD,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAE5B,iBADA;AAEN6B,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASe,YAAT,CAAsBC,MAAtB,EAA8B;AAC1B,SAAOlB,KAAK,CAACgB,GAAN,yBAA2BE,MAAM,IAAI,CAArC,EAAP,CAD0B,CAE1B;AACH;;AAED,SAAU9E,SAAV,CAAoBgE,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMzC,IAAI,CAACsD,YAAD,EAAeb,MAAM,CAACc,MAAtB,CAAV;;AAFvB;AAEcb,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAHR;AAIQ,iBAAM9C,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAE7B,kBADA;AAENuB,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQI,UAAAA,OAAO,CAACG,KAAR;AATR;AAUQ,iBAAMhD,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAE/B,kBADA;AAENgC,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASiB,gBAAT,CAA0BjB,IAA1B,EAAgCgB,MAAhC,EAAwC;AACpC,SAAOlB,KAAK,CAACgB,GAAN,iBAAmBd,IAAnB,2BAAwCgB,MAAM,IAAI,CAAlD,EAAP,CADoC,CAEpC;AACH;;AAED,SAAU7E,aAAV,CAAwB+D,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMzC,IAAI,CAACwD,gBAAD,EAAmBf,MAAM,CAACF,IAA1B,EAAgCE,MAAM,CAACc,MAAvC,CAAV;;AAFvB;AAEcb,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAHR;AAIQ,iBAAM9C,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEvB,uBADA;AAENiB,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQI,UAAAA,OAAO,CAACG,KAAR;AATR;AAUQ,iBAAMhD,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEzB,uBADA;AAEN0B,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASkB,mBAAT,CAA6BlB,IAA7B,EAAmCgB,MAAnC,EAA2C;AACvC,SAAOlB,KAAK,CAACgB,GAAN,oBAAsBK,kBAAkB,CAACnB,IAAD,CAAxC,qBAAyDgB,MAAM,IAAI,CAAnE,EAAP,CADuC,CAEvC;AACH;;AAED,SAAU5E,gBAAV,CAA2B8D,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMzC,IAAI,CAACyD,mBAAD,EAAsBhB,MAAM,CAACF,IAA7B,EAAmCE,MAAM,CAACc,MAA1C,CAAV;;AAFvB;AAEcb,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAHR;AAIQ,iBAAM9C,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEhC,0BADA;AAEN0B,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AASQI,UAAAA,OAAO,CAACG,KAAR;AATR;AAUQ,iBAAMhD,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAElC,0BADA;AAENmC,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASoB,UAAT,CAAoBpB,IAApB,EAA0B;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,OAAX,EAAoBD,IAApB,CAAP;AACH;;AAED,SAAU3D,OAAV,CAAkB6D,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMzC,IAAI,CAAC2D,UAAD,EAAalB,MAAM,CAACF,IAApB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAHR;AAIQ,iBAAM9C,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEtC,gBADA;AAENgC,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAJR;AAAA;AAQQ,iBAAMzC,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEV,cADA;AAENI,YAAAA,IAAI,EAAEG,MAAM,CAACH,IAAP,CAAYqB;AAFZ,WAAD,CAAT;;AARR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaQ,iBAAM9D,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAExC,gBADA;AAENyC,YAAAA,KAAK,EAAE,aAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAASsB,aAAT,CAAuBtB,IAAvB,EAA6B;AACzB,SAAOF,KAAK,UAAL,iBAAsBE,IAAtB,EAAP;AACH;;AAED,SAAU1D,UAAV,CAAqB4D,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMzC,IAAI,CAAC6D,aAAD,EAAgBpB,MAAM,CAACF,IAAvB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AAHR;AAIQ,iBAAM9C,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEpB,mBADA;AAENc,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAJR;AAAA;AAQQ,iBAAMzC,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAET,iBADA;AAENG,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,WAAD,CAAT;;AARR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAaQ,iBAAMzC,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEtB,mBADA;AAENuB,YAAAA,KAAK,EAAE,cAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,SAASuB,aAAT,CAAuBvB,IAAvB,EAA6B;AACzB,SAAOF,KAAK,CAACG,IAAN,iBAAoBD,IAAI,CAACwB,MAAzB,eAA2CxB,IAA3C,CAAP;AACH;;AAED,SAAUzD,UAAV,CAAqB2D,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMzC,IAAI,CAAC8D,aAAD,EAAgBrB,MAAM,CAACF,IAAvB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAM5C,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAEzC,mBADA;AAENmC,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQI,UAAAA,OAAO,CAACG,KAAR;AARR;AASQ,iBAAMhD,GAAG,CAAC;AACN+C,YAAAA,IAAI,EAAE3C,mBADA;AAEN4C,YAAAA,KAAK,EAAE,cAAIC,QAAJ,CAAaR;AAFd,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUxD,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMgB,UAAU,CAAC4B,eAAD,EAAkBvD,OAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUY,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMe,UAAU,CAACkC,qBAAD,EAAwB5D,YAAxB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUY,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMc,UAAU,CAACU,iBAAD,EAAoBnC,QAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUY,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMa,UAAU,CAAC+B,mBAAD,EAAsBvD,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUY,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMc,QAAQ,CAAC,IAAD,EAAMc,kBAAN,EAA0BtC,SAA1B,CAAd;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUW,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMW,UAAU,CAACmB,iBAAD,EAAoB1C,QAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUa,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMY,QAAQ,CAAC,IAAD,EAAMoB,uBAAN,EAA+B3C,aAA/B,CAAd;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUY,qBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMW,QAAQ,CAAC,IAAD,EAAMW,0BAAN,EAAkCjC,gBAAlC,CAAd;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUY,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,UAAU,CAACO,gBAAD,EAAmB1B,OAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUY,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACyB,mBAAD,EAAsB3C,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUY,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACI,mBAAD,EAAsBrB,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUY,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACd,YAAD,CADE,EAENc,IAAI,CAACb,iBAAD,CAFE,EAGNa,IAAI,CAACZ,aAAD,CAHE,EAINY,IAAI,CAACX,eAAD,CAJE,EAKNW,IAAI,CAACN,YAAD,CALE,EAMNM,IAAI,CAACT,aAAD,CANE,EAONS,IAAI,CAACV,cAAD,CAPE,EAQNU,IAAI,CAACR,kBAAD,CARE,EASNQ,IAAI,CAACP,qBAAD,CATE,EAUNO,IAAI,CAACL,eAAD,CAVE,EAWNK,IAAI,CAACJ,eAAD,CAXE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, delay, fork, put, takeLatest ,call, throttle} from \"redux-saga/effects\";\r\nimport {\r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS,\r\n    LOAD_POST_FAILURE,\r\n    LOAD_POST_REQUEST,\r\n    LOAD_POST_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE, REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    RETWEET_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport axios from 'axios';\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images',data);\r\n}\r\n\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(data) {\r\n    return axios.get(`/post/${data}`);\r\n    // lastId가 null이면 0으로\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n    // lastId가 null이면 0으로\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadUserPostsAPI(data, lastId) {\r\n    return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\r\n    // lastId가 null이면 0으로\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsAPI(data, lastId) {\r\n    return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\r\n    // lastId가 null이면 0으로\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    try {\r\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000,LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield throttle(5000,LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(5000,LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}