{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '이정운'\n    },\n    content: '첫 번째 게시글 #해시태크 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://3.bp.blogspot.com/-paIvI6xdE2k/WovHemFi6jI/AAAAAAACN20/6hBeNS_XVO0idJlKvTR_hKhDsaob7pdOgCLcBGAs/s1600/3.gif'\n    }, {\n      id: shortId.generate(),\n      src: 'https://coinpan.com/files/attach/images/198/013/866/096/b5a203116c9ff0d11a13d9bb43f7bb39.gif'\n    }, {\n      id: shortId.generate(),\n      src: 'http://t1.daumcdn.net/thumb/R1024x0/?fname=http://cfile271.uf.daum.net/image/276DCA3C5586B77E26FDB2'\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: '쩡운'\n      },\n      content: '호호호호'\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: '쩡훈'\n      },\n      content: '헝헝헝헝'\n    }]\n  }],\n  imagePaths: [],\n  // imagePaths는 이미지 업로드할때 생기는 경로가 저장\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(function () {\n  return {\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName() //faker 랜덤 닉네임 \n\n    },\n    content: faker.lorem.paragraph(),\n    //faker 랜덤 문단\n    Images: [{\n      src: faker.image.image()\n    }],\n    Comments: [{\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName() //faker 랜덤 닉네임 \n\n      },\n      content: faker.lorem.sentence() //faker 랜덤 문장\n\n    }]\n  };\n}));\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var ADD_POST_TO_ME = 'ADD_PPOST_TO_ME';\nexport var REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '이정운'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '이정운'\n    }\n  };\n}; // reducer은 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성을 지키면서)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        console.log('reducer post');\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case REMOVE_POST_REQUEST:\n        console.log('reducer post');\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        }); //불변성을 안지키는 거면 draft(immer)을 안쓰는것이 좋다.\n\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // immer 쓰면 이것이 위에 처럼 간단해진다.\n          // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //     ...state,\n          //     mainPosts,\n          //     addCommentLoading: false,\n          //     addCommentDone: true,\n          // };\n        }\n        ;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","name","findName","lorem","paragraph","image","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","console","log","unshift","error","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [{\r\n        id: 1,\r\n        User: {\r\n            id: 1,\r\n            nickname: '이정운',\r\n        },\r\n        content: '첫 번째 게시글 #해시태크 #익스프레스',\r\n        Images: [{\r\n            id: shortId.generate(),\r\n            src: 'https://3.bp.blogspot.com/-paIvI6xdE2k/WovHemFi6jI/AAAAAAACN20/6hBeNS_XVO0idJlKvTR_hKhDsaob7pdOgCLcBGAs/s1600/3.gif',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'https://coinpan.com/files/attach/images/198/013/866/096/b5a203116c9ff0d11a13d9bb43f7bb39.gif',\r\n        }, {\r\n            id: shortId.generate(),\r\n            src: 'http://t1.daumcdn.net/thumb/R1024x0/?fname=http://cfile271.uf.daum.net/image/276DCA3C5586B77E26FDB2',\r\n        }],\r\n        Comments: [{\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: '쩡운'\r\n            },\r\n            content: '호호호호',\r\n        }, {\r\n            id: shortId.generate(),\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: '쩡훈',\r\n            },\r\n            content: '헝헝헝헝',\r\n        }],\r\n    }],\r\n    imagePaths: [],\r\n    // imagePaths는 이미지 업로드할때 생기는 경로가 저장\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n};\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(\r\n    Array(20).fill().map(() => ({\r\n        id: shortId.generate(),\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n            //faker 랜덤 닉네임 \r\n        },\r\n        content: faker.lorem.paragraph(),\r\n        //faker 랜덤 문단\r\n        Images: [{\r\n            src: faker.image.image(),\r\n        }],\r\n        Comments: [{\r\n            User: {\r\n                id: shortId.generate(),\r\n                nickname: faker.name.findName(),\r\n                //faker 랜덤 닉네임 \r\n            },\r\n            content: faker.lorem.sentence(),\r\n            //faker 랜덤 문장\r\n        }],\r\n    })),\r\n);\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_PPOST_TO_ME';\r\nexport const REMOVE_POST_OF_ME = 'REMOVE_POST_OF_ME';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '이정운',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: '이정운',\r\n    },\r\n});\r\n\r\n\r\n// reducer은 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성을 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n    return produce(state, (draft) => {\r\n        switch (action.type) {\r\n            case ADD_POST_REQUEST:\r\n                console.log('reducer post');\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS:\r\n                draft.mainPosts.unshift(dummyPost(action.data));\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                break;\r\n            case ADD_POST_FAILURE:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.error;\r\n                break;\r\n\r\n            case REMOVE_POST_REQUEST:\r\n                console.log('reducer post');\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;\r\n            case REMOVE_POST_SUCCESS:\r\n                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n                //불변성을 안지키는 거면 draft(immer)을 안쓰는것이 좋다.\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                break;\r\n            case REMOVE_POST_FAILURE:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.error;\r\n                break;\r\n\r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS: {\r\n                const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n                post.Comments.unshift(dummyComment(action.data.content));\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                break;\r\n                // immer 쓰면 이것이 위에 처럼 간단해진다.\r\n                // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n                // const post = { ...state.mainPosts[postIndex] };\r\n                // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n                // const mainPosts = [...state.mainPosts];\r\n                // mainPosts[postIndex] = post;\r\n                // return {\r\n                //     ...state,\r\n                //     mainPosts,\r\n                //     addCommentLoading: false,\r\n                //     addCommentDone: true,\r\n                // };\r\n            };\r\n            case ADD_COMMENT_FAILURE:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.error;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    });\r\n\r\n\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}