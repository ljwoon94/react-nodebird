{"ast":null,"code":"import { all, delay, fork, put, takeLatest, call, throttle } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POST_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // lastId가 null이면 0으로\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`); // lastId가 null이면 0으로\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    console.log('saga post');\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","call","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POST_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","axios","retweetAPI","data","post","retweet","action","result","console","log","type","err","error","response","uploadImagesAPI","uploadImages","likePostAPI","patch","likePost","unlikePostAPI","delete","unlikePost","loadPostAPI","lastId","get","loadPost","loadPostsAPI","loadPosts","addPostAPI","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchRetweet","watchUploadImages","watchLikePost","watchUnlikePost","watchLoadPosts","watchLoadPost","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest ,call, throttle} from \"redux-saga/effects\";\r\nimport {\r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS,\r\n    LOAD_POST_REQUEST,\r\n    REMOVE_POST_FAILURE, REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    RETWEET_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport axios from 'axios';\r\n\r\nfunction retweetAPI(data) {\r\n    return axios.post(`/post/${data}/retweet`);\r\n}\r\n\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        const result = yield call(retweetAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImagesAPI(data) {\r\n    return axios.post('/post/images',data);\r\n}\r\n\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostAPI(data) {\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        const result = yield call(likePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n    return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n    // lastId가 null이면 0으로\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        const result = yield call(loadPostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsAPI(lastId) {\r\n    return axios.get(`/posts?lastId=${lastId || 0}`);\r\n    // lastId가 null이면 0으로\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.lastId);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        const result = yield call(removePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\n\r\nfunction* watchLoadPosts() {\r\n    yield throttle(5000,LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchRetweet),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchAddPost),\r\n        fork(watchLoadPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}