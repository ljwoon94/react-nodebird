{"ast":null,"code":"import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport { CHANGE_NICKNAME_REQUEST, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOAD_MY_INFO_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from \"../reducers/user\";\nimport axios from 'axios';\n\nfunction changeNicknameAPI() {\n  return axios.get('/user');\n}\n\nfunction* changeNickname(action) {\n  try {\n    console.log('saga changeNickname');\n    const result = yield call(changeNicknameAPI, action.data);\n    yield put({\n      type: CHANGE_NICKNAME_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: CHANGE_NICKNAME_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadMyInfoAPI() {\n  return axios.get('/user');\n}\n\nfunction* loadMyInfo(action) {\n  try {\n    console.log('saga loadMyInfo');\n    const result = yield call(loadMyInfoAPI, action.data); //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \n    // npm i passport passport-local 로그인를 다루는 미들웨어\n\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  } // 성공결과는 result.data\n  // 실패결과는 err.response.data\n  // put은 디스패치라 생각하면 좋다\n\n}\n\nfunction followAPI() {\n  return axios.post('/api/follow');\n}\n\nfunction* follow(action) {\n  try {\n    console.log('saga follow'); //const result = yield call(logInAPI, action.data);\n    //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \n\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unfollowAPI() {\n  return axios.post('/api/unfollow');\n}\n\nfunction* unfollow(action) {\n  try {\n    console.log('saga unfollow');\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction logInAPI(data) {\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    console.log('saga logIn');\n    const result = yield call(logInAPI, action.data); //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \n    // npm i passport passport-local 로그인를 다루는 미들웨어\n\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  } // 성공결과는 result.data\n  // 실패결과는 err.response.data\n  // put은 디스패치라 생각하면 좋다\n\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); //작동순서 프론트 pages의 onSubmit에 데이터(아이디, 닉네임, 비밀번호)가\n    //SIGNUPREQ 를 통해 리덕스랑 사가 실행, 데이터 함수는 action으로가\n    //signUpAPI의 데이터로 이동 url을 통해 전송\n\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchChangeNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n} // yield take('LOG_IN_REQUEST');은 LOG_IN_REQUEST이 실행될때까지 기다리겠다.\n\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchChangeNickname), fork(watchLoadMyInfo), fork(watchFollow), fork(watchUnfollow), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}\n;","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/sagas/user.js"],"names":["all","call","delay","fork","put","takeLatest","CHANGE_NICKNAME_REQUEST","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","LOAD_MY_INFO_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","axios","changeNicknameAPI","get","changeNickname","action","console","log","result","data","type","CHANGE_NICKNAME_SUCCESS","err","CHANGE_NICKNAME_FAILURE","error","response","loadMyInfoAPI","loadMyInfo","followAPI","post","follow","unfollowAPI","unfollow","logInAPI","logIn","logOutAPI","logOut","signUpAPI","signUp","watchChangeNickname","watchLoadMyInfo","watchFollow","watchUnfollow","watchLogIn","watchLogOut","watchSignUp","userSaga"],"mappings":"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","sourcesContent":["import { all, call, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport { CHANGE_NICKNAME_REQUEST, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOAD_MY_INFO_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from \"../reducers/user\";\r\nimport axios from 'axios';\r\n\r\nfunction changeNicknameAPI() {\r\n    return axios.get('/user');\r\n}\r\n\r\nfunction* changeNickname(action) {\r\n    try {\r\n        console.log('saga changeNickname');\r\n        const result = yield call(changeNicknameAPI, action.data);\r\n        \r\n        yield put({\r\n            type: CHANGE_NICKNAME_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: CHANGE_NICKNAME_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadMyInfoAPI() {\r\n    return axios.get('/user');\r\n}\r\n\r\nfunction* loadMyInfo(action) {\r\n    try {\r\n        console.log('saga loadMyInfo');\r\n        const result = yield call(loadMyInfoAPI, action.data);\r\n        //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \r\n        // npm i passport passport-local 로그인를 다루는 미들웨어\r\n        yield put({\r\n            type: LOAD_MY_INFO_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOAD_MY_INFO_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n\r\n    // 성공결과는 result.data\r\n    // 실패결과는 err.response.data\r\n    // put은 디스패치라 생각하면 좋다\r\n}\r\n\r\nfunction followAPI() {\r\n    return axios.post('/api/follow');\r\n}\r\n\r\nfunction* follow(action) {\r\n    try {\r\n        console.log('saga follow');\r\n        //const result = yield call(logInAPI, action.data);\r\n        //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \r\n        yield delay(1000);\r\n        yield put({\r\n            type: FOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: FOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction unfollowAPI() {\r\n    return axios.post('/api/unfollow');\r\n}\r\n\r\nfunction* unfollow(action) {\r\n    try {\r\n        console.log('saga unfollow');\r\n        yield delay(1000);\r\n        yield put({\r\n            type: UNFOLLOW_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: UNFOLLOW_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction logInAPI(data) {\r\n    return axios.post('/user/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n    try {\r\n        console.log('saga logIn');\r\n        const result = yield call(logInAPI, action.data);\r\n        //() 인자엔 첫번째는 함수 그 인후론 매게변수들 넣음. \r\n        // npm i passport passport-local 로그인를 다루는 미들웨어\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n\r\n    // 성공결과는 result.data\r\n    // 실패결과는 err.response.data\r\n    // put은 디스패치라 생각하면 좋다\r\n}\r\n\r\nfunction logOutAPI() {\r\n    return axios.post('/user/logout');\r\n}\r\n\r\nfunction* logOut() {\r\n    try {\r\n\r\n        yield call(logOutAPI);\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n    return axios.post('/user', data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n    try {\r\n        const result = yield call(signUpAPI, action.data);\r\n        //작동순서 프론트 pages의 onSubmit에 데이터(아이디, 닉네임, 비밀번호)가\r\n        //SIGNUPREQ 를 통해 리덕스랑 사가 실행, 데이터 함수는 action으로가\r\n        //signUpAPI의 데이터로 이동 url을 통해 전송\r\n        console.log(result);\r\n        yield put({\r\n            type: SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: SIGN_UP_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* watchChangeNickname() {\r\n    yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\r\n}\r\nfunction* watchLoadMyInfo() {\r\n    yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\r\n}\r\nfunction* watchFollow() {\r\n    yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\nfunction* watchUnfollow() {\r\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n// yield take('LOG_IN_REQUEST');은 LOG_IN_REQUEST이 실행될때까지 기다리겠다.\r\nfunction* watchLogOut() {\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchChangeNickname),\r\n        fork(watchLoadMyInfo),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLogIn),\r\n        fork(watchLogOut),\r\n        fork(watchSignUp),\r\n    ]);\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}