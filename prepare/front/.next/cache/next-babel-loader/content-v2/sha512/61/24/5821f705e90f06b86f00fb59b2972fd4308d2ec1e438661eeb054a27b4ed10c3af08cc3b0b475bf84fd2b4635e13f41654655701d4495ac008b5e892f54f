{"ast":null,"code":"import { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux'; // combineReducer은 리듀서끼리 합치게 해준다.\n\nimport user from './user';\nimport post from './post'; //(이전상태, 액션) => 다음상태\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return action.payload;\n\n    default:\n      {\n        const combinedReducer = combineReducers({\n          user,\n          post\n        }); //combinedReducer user와 post가 합친 리듀서 생성\n\n        return combinedReducer(state, action);\n      }\n  }\n}; // const rootReducer = combineReducers({\n//     index: (state = {}, action) => {\n//         switch (action.type) {\n//             case HYDRATE:\n//                 console.log('HYDRATE', action);\n//                 return {\n//                     ...state,\n//                     ...action.payload,\n//                 };\n//             // HYDRATE를 위해 인덕스 리듀션을 추가\n//             default: return state;\n//             // default: return state;를 안적으면 리턴값이 undifined가 뜬다.\n//         }\n//     },\n//     user,\n//     post,\n// });\n\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","post","rootReducer","state","action","type","console","log","payload","combinedReducer"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CACA;;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,OAAL;AACIQ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,aAAOA,MAAM,CAACI,OAAd;;AACJ;AAAS;AACL,cAAMC,eAAe,GAAGV,eAAe,CAAC;AACpCC,UAAAA,IADoC;AAEpCC,UAAAA;AAFoC,SAAD,CAAvC,CADK,CAKT;;AACI,eAAOQ,eAAe,CAACN,KAAD,EAAQC,MAAR,CAAtB;AACH;AAXL;AAaH,CAdD,C,CAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeF,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\nimport { combineReducers } from 'redux';\r\n// combineReducer은 리듀서끼리 합치게 해준다.\r\nimport user from './user';\r\nimport post from './post';\r\n\r\n//(이전상태, 액션) => 다음상태\r\n\r\nconst rootReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            console.log('HYDRATE', action);\r\n            return action.payload;\r\n        default: {\r\n            const combinedReducer = combineReducers({\r\n                user,\r\n                post,\r\n        });\r\n        //combinedReducer user와 post가 합친 리듀서 생성\r\n            return combinedReducer(state, action);\r\n        }\r\n    }\r\n};\r\n// const rootReducer = combineReducers({\r\n//     index: (state = {}, action) => {\r\n//         switch (action.type) {\r\n//             case HYDRATE:\r\n//                 console.log('HYDRATE', action);\r\n//                 return {\r\n//                     ...state,\r\n//                     ...action.payload,\r\n//                 };\r\n//             // HYDRATE를 위해 인덕스 리듀션을 추가\r\n//             default: return state;\r\n//             // default: return state;를 안적으면 리턴값이 undifined가 뜬다.\r\n//         }\r\n//     },\r\n//     user,\r\n//     post,\r\n// });\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}