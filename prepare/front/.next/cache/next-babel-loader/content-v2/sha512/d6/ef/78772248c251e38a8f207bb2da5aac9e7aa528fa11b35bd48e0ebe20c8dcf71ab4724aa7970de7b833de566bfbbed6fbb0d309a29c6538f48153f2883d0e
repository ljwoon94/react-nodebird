{"ast":null,"code":"import _regeneratorRuntime from \"C:/job/react-nodebird/prepare/front/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, LOAD_POSTS_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\n\nfunction loadPostsAPI(data) {\n  return axios.post('/api/loadPosts', data);\n}\n\nfunction loadPosts(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          //const result = yield call(addPostAPI, action.data);\n          console.log('saga post');\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          id = shortId.generate();\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 7:\n          _context.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/api/addPost', data);\n}\n\nfunction addPost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function addPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          //const result = yield call(addPostAPI, action.data);\n          console.log('saga post');\n          _context2.next = 4;\n          return delay(1000);\n\n        case 4:\n          id = shortId.generate();\n          _context2.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: {\n              id: id,\n              content: action.data\n            }\n          });\n\n        case 7:\n          _context2.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: id\n          });\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 11]]);\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/removePost', data);\n}\n\nfunction removePost(action) {\n  var id;\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          //const result = yield call(removePostAPI, action.data);\n          console.log('saga post');\n          _context3.next = 4;\n          return delay(1000);\n\n        case 4:\n          id = shortId.generate();\n          _context3.next = 7;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 7:\n          _context3.next = 9;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 9:\n          _context3.next = 15;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 15;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 11]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/api/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context4.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context4.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 7]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLoadPosts), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/sagas/post.js"],"names":["loadPosts","addPost","removePost","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga","all","delay","fork","put","takeLatest","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","LOAD_POSTS_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_OF_ME","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","loadPostsAPI","data","axios","post","action","console","log","id","generate","type","content","response","addPostAPI","removePostAPI","addCommentAPI","postId"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\r\nimport shortId from 'shortid';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_TO_ME, LOAD_POSTS_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_OF_ME, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, } from \"../reducers/post\";\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.post('/api/loadPosts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data);\r\n        console.log('saga post');\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/api/addPost', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data);\r\n        console.log('saga post');\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: {\r\n                id,\r\n                content: action.data,\r\n            },\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/removePost', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        //const result = yield call(removePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        //const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchLoadPosts),\r\n        fork(watchAddPost),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}