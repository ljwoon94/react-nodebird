{"ast":null,"code":"import { all, delay, fork, put, takeLatest, call } from \"redux-saga/effects\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\nimport axios from 'axios';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    console.log('saga post');\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    console.log('saga post');\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post('/api/removePost', data);\n}\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data);\n    console.log('saga post');\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","call","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","axios","loadPostsAPI","data","get","loadPosts","action","result","console","log","type","err","error","response","addPostAPI","post","content","addPost","id","shortId","generate","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest ,call} from \"redux-saga/effects\";\r\nimport {\r\n    ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n    ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n    LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS,\r\n    REMOVE_POST_FAILURE, REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\nimport axios from 'axios';\r\n\r\nfunction loadPostsAPI(data) {\r\n    return axios.get('/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n    try {\r\n        const result = yield call(loadPostsAPI, action.data);\r\n        console.log('saga post');\r\n        yield put({\r\n            type: LOAD_POSTS_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n    return axios.post('/post', {content:data});\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        console.log('saga post');\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data,\r\n        });\r\n        yield put({\r\n            type: ADD_POST_TO_ME,\r\n            data: result.data.id,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n    return axios.post('/api/removePost', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        //const result = yield call(removePostAPI, action.data);\r\n        console.log('saga post');\r\n        yield delay(1000);\r\n        const id = shortId.generate();\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: action.data,\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_OF_ME,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        console.error(err);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchLoadPosts),\r\n        fork(watchRemovePost),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}