{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [// {\n    //     id: 1,\n    //     User: {\n    //         id: 1,\n    //         nickname: '이정운',\n    //     },\n    //     content: '첫 번째 게시글 #해시태크 #익스프레스',\n    //     Images: [{\n    //         id: shortId.generate(),\n    //         src: 'https://3.bp.blogspot.com/-paIvI6xdE2k/WovHemFi6jI/AAAAAAACN20/6hBeNS_XVO0idJlKvTR_hKhDsaob7pdOgCLcBGAs/s1600/3.gif',\n    //     }, {\n    //         id: shortId.generate(),\n    //         src: 'https://coinpan.com/files/attach/images/198/013/866/096/b5a203116c9ff0d11a13d9bb43f7bb39.gif',\n    //     }, {\n    //         id: shortId.generate(),\n    //         src: 'http://t1.daumcdn.net/thumb/R1024x0/?fname=http://cfile271.uf.daum.net/image/276DCA3C5586B77E26FDB2',\n    //     }],\n    //     Comments: [{\n    //         id: shortId.generate(),\n    //         User: {\n    //             id: shortId.generate(),\n    //             nickname: '쩡운'\n    //         },\n    //         content: '호호호호',\n    //     }, {\n    //         id: shortId.generate(),\n    //         User: {\n    //             id: shortId.generate(),\n    //             nickname: '쩡훈',\n    //         },\n    //         content: '헝헝헝헝',\n    //     }],\n    // }\n  ],\n  imagePaths: [],\n  // imagePaths는 이미지 업로드할때 생기는 경로가 저장\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const generateDumyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName() //faker 랜덤 닉네임 \n\n  },\n  content: faker.lorem.paragraph(),\n  //faker 랜덤 문단\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName() //faker 랜덤 닉네임 \n\n    },\n    content: faker.lorem.sentence() //faker 랜덤 문장\n\n  }]\n}));\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '이정운'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '이정운'\n  }\n}); // reducer은 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성을 지키면서)\n\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case LOAD_POSTS_REQUEST:\n      console.log('reducer post');\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.mainPosts = action.data.concat(draft.mainPosts); //concat 합치기\n\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.hasMorePosts = draft.mainPosts.length < 50;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case ADD_POST_REQUEST:\n      console.log('reducer post');\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.mainPosts.unshift(dummyPost(action.data));\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      console.log('reducer post');\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data); //불변성을 안지키는 거면 draft(immer)을 안쓰는것이 좋다.\n\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostLoading = false;\n      draft.removePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break; // immer 쓰면 이것이 위에 처럼 간단해진다.\n        // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n        // const post = { ...state.mainPosts[postIndex] };\n        // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n        // const mainPosts = [...state.mainPosts];\n        // mainPosts[postIndex] = post;\n        // return {\n        //     ...state,\n        //     mainPosts,\n        //     addCommentLoading: false,\n        //     addCommentDone: true,\n        // };\n      }\n      ;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/job/react-nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDumyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","console","log","concat","length","error","unshift","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\n\r\nexport const initialState = {\r\n    mainPosts: [\r\n        // {\r\n        //     id: 1,\r\n        //     User: {\r\n        //         id: 1,\r\n        //         nickname: '이정운',\r\n        //     },\r\n        //     content: '첫 번째 게시글 #해시태크 #익스프레스',\r\n        //     Images: [{\r\n        //         id: shortId.generate(),\r\n        //         src: 'https://3.bp.blogspot.com/-paIvI6xdE2k/WovHemFi6jI/AAAAAAACN20/6hBeNS_XVO0idJlKvTR_hKhDsaob7pdOgCLcBGAs/s1600/3.gif',\r\n        //     }, {\r\n        //         id: shortId.generate(),\r\n        //         src: 'https://coinpan.com/files/attach/images/198/013/866/096/b5a203116c9ff0d11a13d9bb43f7bb39.gif',\r\n        //     }, {\r\n        //         id: shortId.generate(),\r\n        //         src: 'http://t1.daumcdn.net/thumb/R1024x0/?fname=http://cfile271.uf.daum.net/image/276DCA3C5586B77E26FDB2',\r\n        //     }],\r\n        //     Comments: [{\r\n        //         id: shortId.generate(),\r\n        //         User: {\r\n        //             id: shortId.generate(),\r\n        //             nickname: '쩡운'\r\n        //         },\r\n        //         content: '호호호호',\r\n        //     }, {\r\n        //         id: shortId.generate(),\r\n        //         User: {\r\n        //             id: shortId.generate(),\r\n        //             nickname: '쩡훈',\r\n        //         },\r\n        //         content: '헝헝헝헝',\r\n        //     }],\r\n        // }\r\n    ],\r\n    imagePaths: [],\r\n    // imagePaths는 이미지 업로드할때 생기는 경로가 저장\r\n    hasMorePosts: true,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n};\r\n\r\nexport const generateDumyPost = (number) => Array(number).fill().map(() => ({\r\n    id: shortId.generate(),\r\n    User: {\r\n        id: shortId.generate(),\r\n        nickname: faker.name.findName(),\r\n        //faker 랜덤 닉네임 \r\n    },\r\n    content: faker.lorem.paragraph(),\r\n    //faker 랜덤 문단\r\n    Images: [{\r\n        src: faker.image.image(),\r\n    }],\r\n    Comments: [{\r\n        User: {\r\n            id: shortId.generate(),\r\n            nickname: faker.name.findName(),\r\n            //faker 랜덤 닉네임 \r\n        },\r\n        content: faker.lorem.sentence(),\r\n        //faker 랜덤 문장\r\n    }],\r\n}));\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n    type: ADD_POST_REQUEST,\r\n    data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n\r\nconst dummyPost = (data) => ({\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n        id: 1,\r\n        nickname: '이정운',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n    id: shortId.generate(),\r\n    content: data,\r\n    User: {\r\n        id: 1,\r\n        nickname: '이정운',\r\n    },\r\n});\r\n\r\n\r\n// reducer은 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성을 지키면서)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n    switch (action.type) {\r\n        case LOAD_POSTS_REQUEST:\r\n            console.log('reducer post');\r\n            draft.loadPostsLoading = true;\r\n            draft.loadPostsDone = false;\r\n            draft.loadPostsError = null;\r\n            break;\r\n        case LOAD_POSTS_SUCCESS:\r\n            draft.mainPosts = action.data.concat(draft.mainPosts);\r\n            //concat 합치기\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsDone = true;\r\n            draft.hasMorePosts = draft.mainPosts.length < 50;\r\n            break;\r\n        case LOAD_POSTS_FAILURE:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsError = action.error;\r\n            break;\r\n\r\n        case ADD_POST_REQUEST:\r\n            console.log('reducer post');\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;\r\n        case ADD_POST_SUCCESS:\r\n            draft.mainPosts.unshift(dummyPost(action.data));\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = false;\r\n            draft.addPostError = action.error;\r\n            break;\r\n\r\n        case REMOVE_POST_REQUEST:\r\n            console.log('reducer post');\r\n            draft.removePostLoading = true;\r\n            draft.removePostDone = false;\r\n            draft.removePostError = null;\r\n            break;\r\n        case REMOVE_POST_SUCCESS:\r\n            draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n            //불변성을 안지키는 거면 draft(immer)을 안쓰는것이 좋다.\r\n            draft.removePostLoading = false;\r\n            draft.removePostDone = true;\r\n            break;\r\n        case REMOVE_POST_FAILURE:\r\n            draft.removePostLoading = false;\r\n            draft.removePostError = action.error;\r\n            break;\r\n\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n            post.Comments.unshift(dummyComment(action.data.content));\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            break;\r\n            // immer 쓰면 이것이 위에 처럼 간단해진다.\r\n            // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n            // const post = { ...state.mainPosts[postIndex] };\r\n            // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n            // const mainPosts = [...state.mainPosts];\r\n            // mainPosts[postIndex] = post;\r\n            // return {\r\n            //     ...state,\r\n            //     mainPosts,\r\n            //     addCommentLoading: false,\r\n            //     addCommentDone: true,\r\n            // };\r\n        };\r\n        case ADD_COMMENT_FAILURE:\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentError = action.error;\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}