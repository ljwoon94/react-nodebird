{"ast":null,"code":"import _regeneratorRuntime from \"C:/job/react-nodebird/prepare/front/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork } from 'redux-saga/effects';\nimport axios from 'axios';\nimport postSaga from './post';\nimport userSaga from './user';\naxios.defaults.baseURL = 'http://localhost:3065'; //sagas 의 post url를 등록\n\naxios.defaults.withCredentials = true; //쿠기 전달 허용 이제 saga에 공통적으로 적용된다.\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([//all은 함수를 동시에 실행시킴\n          fork(postSaga), fork(userSaga) // fork는 비동기 함수를 실행하는 것\n          // 요청을 보내버리고 결과를 기다리지 않고 다음 것이 실행됨\n          // call은 동기 함수를 실행하는 것\n          // 결과를 기다렸다 다음 것이 실행됨. \n          ]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} // generate 함수 function*\n// const gen = function*(){\n// console.log(1);\n// yield;\n// console.log(2);\n// yield;   \n//}\n//\n// const generator = gen();\n// generator.next()  generate함수를 실행시키려면 next()필요\n// console.log(1)실행. 다시 generator 함수를 실행하면\n// console.log(2)실행 generate는 yield가 나오는 곳에서 멈춤\n// 중단점이 있는 함수. 이것이 saga\n// done: true가 나오면 멈춤\n//\n// generate 함수로 무한 표현하기\n// let i = 0;\n// const gen = function* () {\n//     while (true) {\n//         yield i++;\n//     }\n// }\n// const g= gen();\n// g.next();","map":null,"metadata":{},"sourceType":"module"}